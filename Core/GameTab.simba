{*******************************************************************************
function R_GetMMLevels(Which: string): Integer;
By: lordsaturn and Drags111
Description: Returns the current value at the designated MM spot.
*******************************************************************************}
function R_GetMMLevels(Which: string): Integer;
begin
  Result := -1;
  case LowerCase(Which) of
    'hitpoints', 'hp': Result := StrToInt(GetInterfaceText(748, 8));
    'prayer', 'pp'   : Result := StrToInt(GetInterfaceText(749, 4));
    'run', 'energy'  : Result := StrToInt(GetInterfaceText(750, 5));
    else SRL_Warn('R_GetMMLevels', 'Invaild string.', -3);
  end;
end;

{*******************************************************************************
function R_IsRunning: boolean;
By: Drags111
Description: Returns true if the run option is set to true.
*******************************************************************************}
function R_IsRunning: boolean;
begin
  Result := GetSetting(173) = 1;
end;

{*******************************************************************************
function R_IsResting: boolean;
By: Drags111
Description: Returns true if your player is performing the resting animation.
*******************************************************************************}
function R_IsResting: boolean;
var
  Animations: TIntegerArray;
begin
  SetLength(Animations, 5);
  Animations := [12108, 2033, 2716, 11786, 5713];
  Result := InIntArray(Animations, GetAnimation);
end;

{*******************************************************************************
procedure R_Rest(MaxEnergy: integer);
By: Drags111
Description: Uses the rest ability until the desired energy is reached.
*******************************************************************************}
function R_Rest(MaxEnergy: integer): boolean;
var
  t, mt, energy: integer;
begin
  MarkTime(mt);
  if(energy >= MaxEnergy)then Exit;
  Result := R_IsResting;
  while(not Result)do
  begin
    if not R_LoggedIn then Exit;
    if (TimeFromMark(mt) > 9000)then Exit;
    Mouse(725, 109, 5, 5, false);
    Result := R_ChooseOption('Rest');
    if(Result)then
    begin
      MarkTime(t);
      While((not R_IsResting) and (TimeFromMark(t) < 3000))do
        wait(100+Random(100));
      Result := (R_IsResting);
    end;
  end;
  energy := R_GetMMLevels('run');
  while(energy < MaxEnergy)do
  begin
    case Random(50) of
      0..5: SleepAndMoveMouse(Random(1000));
      else wait(100+Random(400));
    end;
    energy := R_GetMMLevels('run');
  end;
end;

{*******************************************************************************
function R_GetSkillLevel(Skill: string; TopNumber: Boolean): Integer;
By: lordsaturn
Description: Grabs the current skill level of any skill
e.g.
Skill = 'hp' when hp is 40/61 and TopNumber = True will return 40
Skill = 'hp' when hp is 40/61 and TopNumber = False will return 61
Returns -1 if failed
*******************************************************************************}
function R_GetSkillLevel(Skill: string; TopNumber: Boolean): Integer;
var
  str: string;
  SkillArr: TStringArray;
  skNo, child: Integer;
begin
  Result := -1;
  str := Lowercase(Skill);
  case str of
    'hp', 'constitution': str := 'hitpoints';
    'ranged': str := 'range';
    'hunter': str := 'hunting';
    'dung'  : str := 'dungeoneering';
  end;

  SkillArr := ['attack', 'strength', 'defence', 'range', 'prayer', 'magic',
    'runecrafting', 'hitpoints', 'agility', 'herblore', 'thieving', 'crafting',
    'fletching', 'slayer', 'mining', 'smithing', 'fishing', 'cooking',
    'firemaking', 'woodcutting', 'farming', 'construction', 'hunting', 'summoning' ,'dungeoneering'];
  if (not InStrArrEx(str, SkillArr, skNo)) then
  begin
    srl_Warn('R_GetSkillLevel', 'Invalid Skill Name/Number: ''' + string(Skill) + '''', warn_AllVersions);
    Exit;
  end;
  inc(skNo);

  case skNo of
    Skill_Attack        : child := 196;
    Skill_Strength      : child := 7;
    Skill_Defense       : child := 24;
    Skill_Range         : child := 48;
    Skill_Prayer        : child := 72;
    Skill_Mage          : child := 89;
    Skill_RuneCrafting  : child := 106;
    Skill_Construction  : child := 130;
    Skill_Dungenoeering : child := 154;
    Skill_HP            : child := 189;
    Skill_Agility       : child := 15;
    Skill_Herblore      : child := 32;
    Skill_Thieving      : child := 56;
    Skill_Crafting      : child := 80;
    Skill_Fletching     : child := 97;
    Skill_Slayer        : child := 114;
    Skill_Hunter        : child := 138;
    Skill_Mining        : child := 182;
    Skill_Smithing      : child := 31;
    Skill_Fishing       : child := 40;
    Skill_Cooking       : child := 64;
    Skill_FireMaking    : child := 168;
    Skill_WoodCutting   : child := 161;
    Skill_Farming       : child := 122;
    Skill_Summoning     : child := 146;
  else
    begin
      srl_Warn('R_GetSkillLevel', 'Invalid Skill Number: ''' + inttostr(skNo) + '''', warn_AllVersions);
      exit;
    end;
  end;

  if not ValidInterface(230) then
  begin
    srl_Warn('R_GetSkillLevel', 'Could not find the skill interface', warn_AllVersions);
    Exit;
  end;
  if not TopNumber then
    Inc(child);
  Result := StrToIntDef(GetInterfaceText(230, child), -1);

end;

{*******************************************************************************
function R_GetTotalLevel: Integer;
By: lordsaturn
Description: Gets total level using reflection
Returns -1 if failed
*******************************************************************************}
function R_GetTotalLevel: Integer;
var
  Str: string;
begin
  Result := -1;
  if not ValidInterface(230) then
  begin
    srl_Warn('R_GetTotalLevel', 'Could not find the correct interface', warn_AllVersions);
    Exit;
  end;
  Str := GetInterfaceText(230, 201);
  //Total level: 427
  Result := StrToIntDef(Copy(Str, Length(Str)-2, 3), -1);
end;
