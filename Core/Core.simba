//------------------------------------------------------------------\\
//--             Scar Non-Standard Resource Library               --||
//--                   Reflection Routines - Core                 --||
//------------------------------------------------------------------//

{==============================================================================
This file relates to Map and Screen locations and converting them to Tiles. The
methods and formulas here relate to hooks into the Runescape Client's rendering
system, and therefore a brief description about how those work will help a lot.

The Runescape world is laid out on a large grid. A coordinate on this grid is
called a Tile. The origin (0,0) is somewhere in the South Western corner of the
world, and the coordinates increase in the North Easternly direction.

A loading area is a smaller grid 104x104 tiles in size whose bounds can be
variable. The origin of the loading area is stored in the client as the global
tile position (BaseX, BaseY), therefore your local Tile position is your global
Tile position minux the origin of the loading area.

A tile is rendered as 512x512 pixels. Most positions in the renderer data are
measured in pixels. This means the loading area is 13312x13312 pixels in size.
to convert a local Tile into a pixel measurement, simply multiply the local Tile
coordinates by 512.

Each corner of a tile has a height stored in a 2D array in the current Plane
object. To calculate the average height of a tile, simply average the height of
its corners.

The client provides a rotation matrix, offset, and scaling values to transform
a "world" pixel coordinate into a "screen" coordinate. The formula for doing
this is found in the TileToMSEx function. Since one often requires sub tile
accuracy, offset values in the range of [0,1] are provided. (0.5,0.5) would be
the center, and (0,0) would be the south-west corner of the tile.

The minimap is simply a perfectly verticle view of the ground as if it were
perfectly flat. Tiles here have a size of 4x4 pixels, and the map is rotated
around your current position by an angle stored in MapAngle. The angle is in
the range [0,16384], with 0 being North and increasing counter-clockwise. The
math for converting a Tile into a "minimap" coordinate is provided in TileToMM.
==============================================================================}

{*******************************************************************
Function LoginIndex: Integer;
By:
Description: Uses the LoginIndex hook.
             2 = Logged Out, 4 = Logging Into Lobby, 6 = Lobbby,
             8 = logging into game, 9 = Logged In. Reaches 10 at
             some points, but with no significance.
********************************************************************}
function LoginIndex : Integer;
begin
  Result := SmartGetFieldInt(0, hook_static_LoginIndex);
end;

{*******************************************************************
Function R_LoggedIn: Boolean;
By: Method / Drags111 / Zyt3x
Description: Returns true if you're logged in.
********************************************************************}
function R_LoggedIn: Boolean;
begin
  Result := (LoginIndex = 10) or (LoginIndex = 11);
end;

{*******************************************************************************
function GetMyPos: TTile;
By: BenLand100
Description: Returns the global tile position of your player.
*******************************************************************************}
function GetMyPos: TTile;
var
  me: Integer;
begin
  me := SmartGetFieldObject(0, hook_static_MyPlayer);
  Result.x := SmartGetFieldInt(0, hook_static_BaseX) + SmartGetFieldInt(me, hook_animable_PixelX) / 512;
  Result.y := SmartGetFieldInt(0, hook_static_BaseY) + SmartGetFieldInt(me, hook_animable_PixelY) / 512;
  SmartFreeObject(me);
end;

{*******************************************************************************
Function GetSpeed : integer;
By: Drags111
Description: Returns the character speed. 0 = not moving. > 0 = moving.
*******************************************************************************}
function GetSpeed: Integer;
var
  MyPlayer: Integer;
begin
  MyPlayer := SmartGetFieldObject(0, hook_static_MyPlayer);
  result:= SmartGetFieldInt(MyPlayer, hook_character_Motion);
  SmartFreeObject(MyPlayer);
end;

{*******************************************************************************
function GetPlaneIndex : Integer;
By: lordsaturn
Description: Returns loaded plane index
*******************************************************************************}
function GetPlaneIndex : Integer;
begin
  Result := SmartGetFieldInt(0,hook_static_LoadedPlane);
end;

{*******************************************************************************
function GetMyLocPos: TTile;
By: BenLand100
Description: Returns the global tile position of your player.
*******************************************************************************}
function GetMyLocPos: TTile;
var
  me: Integer;
begin
  me := SmartGetFieldObject(0, hook_static_MyPlayer);
  Result.x := (SmartGetFieldInt(me, hook_animable_PixelX) - SmartGetFieldInt(0, hook_static_BaseX)) / 512;
  Result.y := (SmartGetFieldInt(me, hook_animable_PixelY) - SmartGetFieldInt(0, hook_static_BaseY)) / 512;
  SmartFreeObject(me);
end;

{*******************************************************************************
procedure UpdateRenderInfo(var Render : TRender; var RenderData : TRenderData);
By: ???
Description: Fills a pair of TRender and TRenderData structures with data.
*******************************************************************************}
procedure UpdateRenderInfo(var Render : TRender; var RenderData : TRenderData);
var
  tk, vp, t: Integer;
begin
  MarkTime(t);
  while ((RenderData.zX <= 0) and (RenderData.zY <= 0) and (TimeFromMark(t) < 10000)) do
  begin
    tk := SmartGetFieldObject(0, hook_static_Toolkit);
    vp := SmartGetFieldObject(tk, hook_sdtoolkit_Viewport);
    with RenderData do
    begin
      xOff := SmartGetFieldFloat(vp,hook_sdviewport_xOff);
      xX := SmartGetFieldFloat(vp,hook_sdviewport_xX);
      xY := SmartGetFieldFloat(vp,hook_sdviewport_xY);
      xZ := SmartGetFieldFloat(vp,hook_sdviewport_xZ);
      yOff := SmartGetFieldFloat(vp,hook_sdviewport_yOff);
      yX := SmartGetFieldFloat(vp,hook_sdviewport_yX);
      yY := SmartGetFieldFloat(vp,hook_sdviewport_yY);
      yZ := SmartGetFieldFloat(vp,hook_sdviewport_yZ);
      zOff := SmartGetFieldFloat(vp,hook_sdviewport_zoff);
      zX := SmartGetFieldFloat(vp,hook_sdviewport_zX);
      zY := SmartGetFieldFloat(vp,hook_sdviewport_zY);
      zZ := SmartGetFieldFloat(vp,hook_sdviewport_zZ);
    end;
    with Render do
    begin
  	xScale := SmartGetFieldInt(tk, hook_sdtoolkit_xScale);
      yScale := SmartGetFieldInt(tk, hook_sdtoolkit_yScale);
  	xMin := SmartGetFieldInt(tk, hook_sdtoolkit_xMin);
      xMax := SmartGetFieldInt(tk, hook_sdtoolkit_xMax);
  	yMin := SmartGetFieldInt(tk, hook_sdtoolkit_yMin);
      yMax := SmartGetFieldInt(tk, hook_sdtoolkit_yMax);
  	zMin := SmartGetFieldInt(tk, hook_sdtoolkit_zMin);
      zMax := SmartGetFieldInt(tk, hook_sdtoolkit_zMax);
    end;
    SmartFreeObject(tk);
    SmartFreeObject(vp);
  end;
end;

{*******************************************************************************
procedure EmptyRenderInfo(var Render : TRender; var RenderData : TRenderData);
By: Drags111
Description: Empties a pair of TRender and TRenderData structures.
*******************************************************************************}
procedure EmptyRenderInfo(var Render : TRender; var RenderData : TRenderData);
begin
  with RenderData do
  begin
    xOff := NULL_INT;
    xX := NULL_INT;
    xY := NULL_INT;
    xZ := NULL_INT;
  	yOff := NULL_INT;
    yX := NULL_INT;
    yY := NULL_INT;
    yZ := NULL_INT;
  	zOff := NULL_INT;
    zX := NULL_INT;
    zY := NULL_INT;
    zZ := NULL_INT;
  end;
  with Render do
  begin
  	xScale := NULL_INT;
    yScale := NULL_INT;
  	xMin := NULL_INT;
    xMax := NULL_INT;
  	yMin := NULL_INT;
    yMax := NULL_INT;
  	zMin := NULL_INT;
    zMax := NULL_INT;
  end;
end;

{*******************************************************************************
function GetTileHeight(tile: TTile) : integer;
By: BenLand100
Description: finds the average height of the global tile provided the tile is in
             the current loading area and on a loaded plane.
*******************************************************************************}
function GetTileHeight(tile: TTile) : integer;
var
  x, y, CurPlane, PlaneInstance : integer;
begin
  x:= tile.x - SmartGetFieldInt(0,hook_static_BaseX);
  y:= tile.y - SmartGetFieldInt(0,hook_static_BaseY);
  if ((x < 0) or (x > 104) or (y < 0) or (y > 104)) then
  begin
    result := 0;
    exit;
  end;
  CurPlane:= SmartGetFieldInt(0,hook_static_LoadedPlane);
  if ((CurPlane < 3) and ((SmartGetFieldArray3DByte(0,hook_static_GroundSettingsArray,1,x,y) and 2) <> 0)) then
    CurPlane:= CurPlane + 1;
  PlaneInstance := SmartGetFieldArrayObject(0,hook_static_PlaneArray,CurPlane);
  result:= (SmartGetFieldArray2DInt(PlaneInstance,hook_sdplane_TileHeights,x,y) +
            SmartGetFieldArray2DInt(PlaneInstance,hook_sdplane_TileHeights,x + 1,y) +
            SmartGetFieldArray2DInt(PlaneInstance,hook_sdplane_TileHeights,x,y + 1) +
            SmartGetFieldArray2DInt(PlaneInstance,hook_sdplane_TileHeights,x + 1,y + 1)) / 4;
  if(Result = -1)then
    writeln('****************TileHight hooks are incorrect.*****************');
  SmartFreeObject(PlaneInstance);
end;

{*******************************************************************************
function PointToTile(P: TPoint): TTile;
By: Drags111
Description: Converts a TPoint to a TTile.
*******************************************************************************}
function PointToTile(P: TPoint): TTile;
begin
  Result := Tile(p.x, p.y);
end;

{*******************************************************************************
function TileToPoint(T: TTile): TPoint;
By: Drags111
Description: Converts a TTile to a TPoint.
*******************************************************************************}
function TileToPoint(T: TTile): TPoint;
begin
  Result := Point(T.x, T.y);
end;

{*******************************************************************************
function TileToMSEx(tile: TTile; offx, offy : extended; height : integer): TPoint;
By: BenLand100
Description: Converts the global tile position, a position on that tile in the
             range [(0,0), (1,1)] with (0.5, 0.5) being center and a height above
             ground level to a screen location on the main screen, taking camera
             position and rotation into account.
*******************************************************************************}
function TileToMSEx(tile: TTile; offx, offy : extended; height : integer) : TPoint;
var
  rd : TRenderData;
  r : TRender;
  pixelX, pixelY, pixelZ, x, y, z: extended;
  tries: integer;
label
  ProcStart;
begin;
  ProcStart:
  EmptyRenderInfo(r, rd);
  pixelX := 0;
  PixelY := 0;
  pixelZ := 0;
  x := 0;
  y := 0;
  z := 0;
  Inc(tries);
  result:= point(-1,-1);
  UpdateRenderInfo(r,rd);
  pixelX:= (tile.x - SmartGetFieldInt(0,hook_static_BaseX) + offX) * 512.0;
  pixelY:= GetTileHeight(tile) - height;
  pixelZ:= (tile.y - SmartGetFieldInt(0,hook_static_BaseY) + offY) * 512.0;
  //Writeln('zX: '+ToStr(rd.zX));
  //Writeln('zY: '+ToStr(rd.zY));
  //Writeln('zZ: '+ToStr(rd.zZ));
  z:= rd.zOff + (rd.zX * pixelX + rd.zY * pixelY + rd.zZ * pixelZ);
  if ((z < r.zMin) or (z > r.zMax)) then
    exit;
  x:= r.xScale * (rd.xOff + (rd.xX * pixelX + rd.xY * pixelY + rd.xZ * pixelZ)) / z;
  y:= r.yScale * (rd.yOff + (rd.yX * pixelX + rd.yY * pixelY + rd.yZ * pixelZ)) / z;
  if ((x >= r.xMin) and (x <= r.xMax) and (y >= r.yMin) and (y <= r.yMax)) then
  begin
    result.x:= Round(x - r.xMin);
    result.y:= Round(y - r.yMin);
    if not PointInBox(Result, IntToBox(MSX1, MSY1, MSX2, MSY2))then
    begin
      Result.x := -1;
      Result.y := -1;
    end;
  end else
  begin
    //Because sometimes the renderer is doing funny stuff, a single repeat will
    //often fix this error, since it should work if it got this far.
    if (tries > 30)then Exit;
    goto ProcStart;
  end;
end;

{*******************************************************************************
function TileToMS(tile: TTile; height : integer): TPoint;
By: BenLand100
Description: Converts the center of a global tile position and a height above
             ground level to a screen location on the main screen, taking camera
             position and rotation into account.
*******************************************************************************}
function TileToMS(TheTile: TTile; height : integer) : TPoint;
begin
  result:= TileToMSEx(TheTile, 0.5, 0.5, height);
end;

{*******************************************************************************
Function TileOnMS(TileX, TileY, Height : Integer) : Boolean;
By: Drags111
Description: Results true if the Tile is on the MS.
*******************************************************************************}
function TileOnMS(TheTile: TTile; Height : Integer) : Boolean;
begin
  Result := PointInBox(TileToMS(TheTile, Height), IntToBox(MSX1, MSY1, MSX2, MSY2));
end;

{*******************************************************************************
function TileOnMSEx(Tile : TTile; offX, offY: extended; Height : Integer) : Boolean;
By: Drags111
Description: Results true if the tile is on the MS.
*******************************************************************************}
function TileOnMSEx(T: TTile; offX, offY: extended; Height : Integer) : Boolean;
begin
  Result := PointInBox(TileToMSEx(T, offX, offY, Height),
                       IntToBox(MSX1, MSY1, MSX2, MSY2));
end;

{*******************************************************************************
function TileInBox(Bounds: TBox; Tile: TTile): boolean;
By: Drags111
Description: Results true if the tile is in the box. TOP LEFT TO BOTTOM RIGHT.
*******************************************************************************}
function TileInBox(Bounds: TBox; T: TTile): boolean;
var
  tx, ty, x1, y1, x2, y2: integer;
begin
  x1 := Bounds.X1; y1 := Bounds.Y1;
  x2 := Bounds.X2; y2 := Bounds.Y2;
  tx := T.X; ty := T.Y;
  Result := ((tx >= x1) and (tx <= x2) and (ty <= y1) and (ty >= y2));
end;

{*******************************************************************************
function MeInBox(Bounds: TBox): boolean;
By: Drags111
Description: Results true if your char is in the box of tiles. TOP LEFT TO
          BOTTOM RIGHT.
*******************************************************************************}
function MeInBox(Bounds: TBox): boolean;
var
  tx, ty, x1, y1, x2, y2: integer;
  T: TTile;
begin
  T := GetMyPos;
  x1 := Bounds.X1; y1 := Bounds.Y1;
  x2 := Bounds.X2; y2 := Bounds.Y2;
  tx := T.X; ty := T.Y;
  Result := ((tx >= x1) and (tx <= x2) and (ty <= y1) and (ty >= y2));
end;

{*******************************************************************************
procedure InvertPath(var Path: TTileArray);
By: Drags111
Description: Reverses the path(array of tiles).
*******************************************************************************}
procedure InvertPath(var Path: TTileArray);
var
  Temp: TTileArray;
  i: integer;
begin
  for i := High(Path) downto 0 do
  begin
    SetLength(Temp, Length(Temp)+1);
    Temp[High(Temp)] := Path[i];
  end;
  Path := Temp;
end;

{*******************************************************************************
function TrimHTML(s: string): string;
By: lordsaturn, fixed by pyroryan
Description: Removes the HTML junk from a string.
*******************************************************************************}
function TrimHTML(S : string): string;
var
  P, P2, PLength: integer;
  Temp: string;
begin
  P := Pos('<', S);
  P2 := Pos('>', S);
  Result := S;
  PLength := P2 - P + 1;
  while (P <> 0) and (P2 <> 0) do
  begin
    Delete(Result, P, PLength);
    P := Pos('<', Result);
    Temp := Result;
    Delete(Temp, 1, P - 1);
    PLength := Pos('>', Temp);
  end;
end;

{*******************************************************************************
procedure GetJavaString(javaString: integer; var pascalString: string; maxLength: integer);
By: BenLand100
Description: Returns a string from a javaString with a specified  maxLength. Do
             not let it overflow, bad things will happen.
*******************************************************************************}
function GetJavaString(javaString: integer; maxLength: integer): string;
Begin
  SetLength(result, maxLength);
  SetLength(result, SmartStringFromString(javaString, result));
End;

{*******************************************************************************
function IsMenuOpen: boolean;
By: BenLand100
Description: Returns true if the menu is displayed
*******************************************************************************}
function IsMenuOpen: boolean;
begin
  result:= SmartGetFieldBoolean(0, hook_static_MenuOpen);
end;

{*******************************************************************************
function GetMenuCount: integer;
By: BenLand100
Description: Returns the number of menu items
*******************************************************************************}
function GetMenuCount: integer;
begin
  Result := SmartGetFieldInt(0, hook_static_MenuOptionCount);
end;

{*******************************************************************************
function GetMenuText: TStringArray;
By: BenLand100
Description: Dumps the data from the MenuNodeList into a TStringArray
*******************************************************************************}
function GetMenuText: TStringArray;
var
  count, nodeList, head, next, last, javaString: Integer;
  item: string;
begin
  nodeList:= SmartGetFieldObject(0, hook_static_MenuNodeList);
  head:= SmartGetFieldObject(nodeList, hook_nodelist_Head);
  //for some reason, the head has null strings, so skip it
  next:= SmartGetFieldObject(head, hook_node_Next);
  count:= GetMenuCount;
  SetLength(result,count);
  repeat
    javaString:= SmartGetFieldObject(next, hook_menu_Action);
    item:= GetJavaString(javaString,256);
    SmartFreeObject(javaString);
    javaString:= SmartGetFieldObject(next, hook_menu_Option);
    item:= item + ' ' + GetJavaString(javaString,256);
    SmartFreeObject(javaString);
    result[count-1]:= TrimHTML(item);
    last:= next;
    next:= SmartGetFieldObject(last, hook_node_Next);
    SmartFreeObject(last);
    count:= count - 1;
  until (count = 0);
  SmartFreeObject(next);
  SmartFreeObject(head);
  SmartFreeObject(nodeList);
end;

{*******************************************************************************
function R_ChooseOptionMulti(Options : TStringArray) : Boolean;
By: Drags111 - Based off nava2's and Lordsaturns.
Description: Chooses the first found option of "Options" from the Right
             Click menu, returns True and Clicks if found, else it will Move the
             mouse to a random Coord or select cancel.
*******************************************************************************}
function R_ChooseOptionMulti(Options : TStringArray) : Boolean;
var
  i, i2, xOff, yOff, t: Integer;
  P : TPoint;
  MenuOptions: TStringArray;

begin
  Result := False;
  if not IsMenuOpen then
  begin
    MarkTime(t);
    while(TimeFromMark(t) < 1000)do ;
    if not IsMenuOpen then Exit;
  end;

  P := Point(SmartGetFieldInt(0, hook_static_MenuX) + 4, SmartGetFieldInt(0, hook_static_MenuY) + 4);
  //Writeln('MenuX: '+ToStr(SmartGetFieldInt(0, hook_static_MenuX)));
  //Writeln('MenuY: '+ToStr(SmartGetFieldInt(0, hook_static_MenuY)));
  MenuOptions := GetMenuText;

  for i := 0 to High(MenuOptions) do
  begin
    for i2 := 0 to High(Options) do
    begin
      if(Pos(Lowercase(Options[i2]), Lowercase(MenuOptions[i])) <> 0)then
      begin
        xOff := RandomRange(4, 4 + Random(Length(MenuOptions[i]) * 4 - 4));
        yOff := 21 + (16 * i) + RandomRange(2, 10);
        Mouse(P.x + xOff, P.y + yOff, 0, 0, True);
        Wait(RandomRange(80, 100));
        Result := not IsMenuOpen;
        Exit;
      end;
    end;
  end;

  case Random(2) of
    0: R_ChooseOptionMulti(['Cancel']);
    1: while IsMenuOpen do
       begin
         MMouse(Random(MSX2), Random(MSY2), 0, 0);
         Wait(RandomRange(100, 200));
       end;
  end;
end;

{*******************************************************************************
function R_ChooseOption(Option : String) : Boolean;
By: Drags111
Description: Chooses the option "Option" from the Right Click menu, returns
             True and clicks if found, else it will Move the Mouse to a random
             Coord or will select cancel.
*******************************************************************************}
function R_ChooseOption(Option : String) : Boolean;
begin
  Result := R_ChooseOptionMulti([Option]);
end;

{*******************************************************************************
function OptionExists(option: string): Boolean;
By: Drags111
Description: Returns true if an option exists in the choose option menu. Choose
             option menu does NOT have to be open.
*******************************************************************************}
function OptionExists(Option : string) : Boolean;
var
  i: integer;
  MenuOptions: TStringArray;
begin
  MenuOptions := GetMenuText;
  for i := High(MenuOptions) downto 0 do
  begin
    Result := (Pos(Option, MenuOptions[i]) > 0);
    if Result then Exit;
  end;
end;

{*******************************************************************************
function R_GetUpText: string;
By: Drags111
Description: Gets the UpText (the text in the upper left corner of RS).
*******************************************************************************}
function R_GetUpText: string;
var
  MenuOptions: TStringArray;
  First: String;
begin
  MenuOptions := GetMenuText;
  First := Trim(MenuOptions[0]);
  Result := First;
  if (Length(MenuOptions) > 1) and (Result <> '') then
    Result := Result+' / '+inttostr(Length(MenuOptions))+' more options';
end;

{*******************************************************************************
function R_IsUpTextMulti(UpText: TStringArray): Boolean;
By: Drags111
Description: Returns true if any instance of the UpText is found.
*******************************************************************************}
function R_IsUpTextMulti(UpText: TStringArray): Boolean;
var
  i: integer;
  UT: String;
begin
  UT := R_GetUpText;
  for I := 0 to High(UpText) do
  begin
    Result := Pos(Lowercase(UpText[I]), Lowercase(UT)) > 0;
    if Result then Exit;
  end;
end;

{*******************************************************************************
function R_IsUpText(UpText: string): Boolean;
By: Drags111
Description: Returns true if UpText is found.
*******************************************************************************}
function R_IsUpText(UpText: string): Boolean;
begin
  Result := R_IsUpTextMulti([UpText]);
end;

{*******************************************************************************
function GetSettingArray: TIntegerArray;
By: Drags111
Description: Returns an int array for the runescape Settings Array.
*******************************************************************************}
function GetSettingArray: TIntegerArray;
var
  SettingArray, Data, DL, i: Integer;
begin
  try
    SettingArray := SmartGetFieldObject(0, hook_static_GetSettings);
    Data := SmartGetFieldObject(SettingArray, hook_settingarray_GetData);

    DL := SmartGetFieldArraySize(Data, '', 1);
    SetLength(Result, DL);
    for i := 0 to DL-1 do
      Result[i] := SmartGetFieldArrayInt(data, '', i); // Never change this. EVER.
      //If you don't like it, talk to Drags111 and he will change your mind.
  finally
    SmartFreeObject(Data);
    SmartFreeOBject(SettingArray);
  end;
end;

{*******************************************************************************
function GetSetting(Setting: Integer): Integer;
By: Drags111
Description: Gets the int setting value at the specified index. Used in some
            antirandoms. (demon).
Returns -1 and warns if failed
*******************************************************************************}
function GetSetting(Setting: Integer): Integer;
var
  SA: TIntegerArray;
begin
  SA := GetSettingArray;
  if(Setting < Length(SA))then
    Result := SA[Setting]
  else
  begin
    srl_Warn('GetSetting', 'Incorrect setting index passed to GetSetting', warn_AllVersions);
    Result := -1;
  end;
end;
