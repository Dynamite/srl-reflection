{*******************************************************************************
procedure TalkToMaster;
By: Drags111
Description: Talks to the quiz master.
*******************************************************************************}
procedure TalkToMaster;
var
  qx, qy: integer;
begin
  While FindColorTolerance(qx, qy, 8388608, 184, 425, 365, 457, 2) or
    FindColorTolerance(qx, qy, 16711680, 184, 425, 365, 457, 2) do
  begin
    if ValidInterface(191)then
      if(GetInterfaceText(191, 9) = 'Pick the odd one out.')then
        Exit;
    wait(100+Random(100));
    Mouse(qx, qy+5, 0, 0, true);
    MouseBox(19, 362, 393, 427, 3);
    wait(100+Random(100));
    ChatWait;
  end;
end;

{*******************************************************************************
function SlotToID(i: integer): integer;
By: Drags111
Description: Converts slot number to the ID at the slot number.
*******************************************************************************}
function SlotToID(i: integer): integer;
begin
  case i of
    1: Result := GetModelZoom(191, 6);
    2: Result := GetModelZoom(191, 7);
    3: Result := GetModelZoom(191, 8);
  end;
end;

{*******************************************************************************
function IDToSlot(id: integer): integer;
By: Drags111
Description: Reverse of SlotToID
*******************************************************************************}
function IDToSlot(id: integer): integer;
begin
  if (SlotToID(1) = id) then Result := 1
    else if (SlotToID(2) = id) then Result := 2
      else if (SlotToID(3) = id) then Result := 3
        else Result := -1;
end;

function inQuizMaster: Boolean;
var
  QuizMaster: TNPC;
begin
  Result := FindNPC('Quiz Master', QuizMaster);
end;

{*******************************************************************************
function ReturnGroup(id: integer): String;
By: Drags111
Description: Returns the group name of the ID.
*******************************************************************************}
function ReturnGroup(id: integer): String;
begin
  case id of
    1715, 1414, 1753, 1383: Result := 'Fish';
    640, 1062, 793, 856: Result := 'Jewelry';
    1510, 1218, 1331, 1996: Result := 'Weapons';
    908, 1280: Result := 'Farming';
  end;
end;

{*******************************************************************************
function StrInArrayCount(Str: String; Arr: TStringArray): integer;
By: Drags111
Description: Counts how many times a string is found in an array.
*******************************************************************************}
function StrInArrayCount(Str: String; Arr: TStringArray): integer;
var
  i: integer;
begin
  for i := 0 to High(Arr) do
    if Arr[i] = Str then Inc(Result);
end;

{*******************************************************************************
function ReturnOddGroup(Groups: TStringArray): integer;
By: Drags111
Description: Returns the odd group out.
*******************************************************************************}
function ReturnOddGroup(Groups: TStringArray): integer;
var
  i: integer;
begin
  for i := 0 to High(Groups) do
    if (StrInArrayCount(Groups[i], Groups) = 1) then
      Result := i+1;
  Writeln('Odd Group Out: '+inttostr(Result));
end;

{*******************************************************************************
function AnswerQuestion: boolean;
By: Drags111
Description: Answers the questions he asks.
*******************************************************************************}
procedure AnswerQuestion;
var
  Groups: TStringArray;
  OddGroup, t: integer;
  Slot: TBox;
begin
  Groups := [ReturnGroup(SlotToID(1)), ReturnGroup(SlotToID(2)), ReturnGroup(SlotToID(3))];
  OddGroup := ReturnOddGroup(Groups);
  case OddGroup of
    1: Slot := IntToBox(48, 419, 123, 446);
    2: Slot := IntToBox(221, 418, 296, 446);
    3: Slot := IntToBox(396, 417, 472, 444);
  end;
  MouseBox(Slot.x1, Slot.y1, Slot.x2, Slot.y1, 1);
  wait(200+Random(200));
  t := GetSystemTime;
  while not ValidInterface(243) do
  begin
    wait(100+Random(100));
    if ((GetSystemTime - t) > 3000) then Exit;
  end;
end;

{*******************************************************************************
function R_SolveQuizMaster: boolean;
By: Drags111
Description: Solves the Quiz Master!
*******************************************************************************}
function R_SolveQuizMaster: boolean;
begin
  if not inQuizMaster then Exit;
  while inQuizMaster do
  begin
    TalkToMaster;
    if (SlotToID(1) > -1) then
      AnswerQuestion;
  end;
  if R_LoggedIn then
  begin
    Result := True;
    Inc(RSolved[RQuiz]);
    AddToReport('Solved Quiz Random!');
  end else
    Inc(RFailed[RQuiz]);
end;

