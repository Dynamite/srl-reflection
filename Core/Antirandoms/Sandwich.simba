// Thanks to
Const
  R_SANDWICHLADY_ID = 8630;
  R_SANDWICHLADY_PORTAL = 11373;

{*******************************************************************************
function R_InSandwichLadyRandom: Boolean;
By: ???
Description: Checks if in this random.
*******************************************************************************}
function R_InSandwichLadyRandom: Boolean;
begin
  Result := ValidNullNPC(R_SANDWICHLADY_ID);
end;

{*******************************************************************************
function R_SandwichDetectFreeItem: Integer
By: ???/Cstrike
Description: Checks if in this random. Updated by Cstrike to include new items.
*******************************************************************************}
function R_SandwichDetectFreeItem: Integer;
var
  S: string;
begin
  S := Between('have a ', ' for free', GetInterfaceText(243, 6));
  R_Debug('Item is: ' + S, 'Sandwichlady');
  Case lowercase(S) of
    'doughnut': Result := 45666;
    'baguette': Result := 10726;
    'bread roll', 'roll': Result := 10727;
    'chocolate bar': Result := 10728;
    'meat pie', 'pie': Result := 10730;
    'square sandwich', 'square': Result := 10731;
    'triangle sandwich': Result := 10732;
  end;
end;

{*******************************************************************************
Function R_SandwichFoodPoint(ID: Integer): TPoint;
By: ???
Description: Gets food TP.
*******************************************************************************}
Function R_SandwichFoodPoint(ID: Integer): TPoint;
var
  I: Integer;
  Children: TIntegerArray;
begin
  Children := [11, 13, 15, 17, 19, 21, 45];
  For I := 0 to 6 do
    if GetModelID(297, Children[i]) = ID then
      Break;
  Case I of
    0 : Result := Point(129, 209);
    1 : Result := Point(220, 215);
    2 : Result := Point(332, 226);
    3 : Result := Point(432, 223);
    4 : Result := Point(180, 148);
    5 : Result := Point(442, 152);
    6 : Result := Point(296, 145);
    7 : Result := Point(-1, -1);
  end;
end;

{*******************************************************************************
Function R_SandwichWaitForSelectionScreen: Boolean;
By: ???
Description: Waits for the screen selection
*******************************************************************************}
Function R_SandwichWaitForSelectionScreen: Boolean;
var
  Mark: Integer;
begin
  MarkTime(Mark);
  R_Debug('Waiting for selection screen..', 'Sandwichlady');
  while TimeFromMark(Mark) < 30000 do
  begin
    Wait(randomRange(500, 1500));
    if ValidInterface(297) then
    begin
      Result := True;
      Break;
    end;
  end;
  if Result then
    R_Debug('Screen selection found', 'Sandwichlady');
  wait (200+random(300));
end;

{*******************************************************************************
function R_ExitSandwichRandom: Boolean;
By: Cstrike/???
Description: Exits through portal. Cstrike: Did MASSIVE revamp of this procedure
A lot less crap now.
*******************************************************************************}
function R_ExitSandwichRandom: Boolean;
var
  NPC: TNPC;
  Portal: TRSObject;
  ThePoint: TPoint;
  TP: TPoint;
begin
  Result := False;
  // Portal Method #1
  R_Debug('Attempt 1 of 2 (Portal exit normal)', 'Sandwichlady');
  Portal := GetObjectByID (R_SANDWICHLADY_PORTAL, OBJECT_TYPE_INTERACTABLE, 25);
  if not (Portal = NULL_RSOBJECT) then
  begin
    if not TileOnMS (Portal.Tile, 0) then
      WalkToTile (Portal.Tile, 2, 0);
    wait (200+random(500));
    if TileOnMS (Portal.Tile, 0) then
    begin
      TP := TileToMS (Portal.Tile, 0);
      Mouse (TP.X, TP.Y, 2, 2, false);
      wait (500+random(1000));
      if R_ChooseOptionMulti (['xit', 'ortal']) then
      begin
        R_Debug('Found portal, exiting..', 'Sandwichlady');
        Result := True;
        Exit;
      end;
    end else R_Debug('Portal could not be found at all', 'Sandwichlady');
  end else R_Debug('Portal returned as a NULL_RSOBJECT, not good.', 'Sandwichlady');

  // NPC Method #2
  R_Debug('Attempt 2 of 2 (Portal exit relative to NPC)', 'Sandwichlady');
  NPC := GetNullNPC(R_SANDWICHLADY_ID);
  If Not TileOnMS(NPC.Tile, 0) then
   If Not WalkToTile(NPC.Tile, 0, 0)then
   begin
     R_Debug('Failed walking to the portal!', 'Sandwichlady');
     Exit;
   end;
  ThePoint := TileToMS(Tile( NPC.Tile.X+2, NPC.Tile.Y-3), 0);
  Mouse(ThePoint.x, ThePoint.y, 5, 5, false);
  wait (500+random(1000));
  if R_ChooseOptionMulti (['xit', 'ortal']) then
  begin
    R_Debug('Clicked the portal!', 'Sandwichlady');
    Result := True;
    Exit;
  end;
  R_Debug('Failed to exit portal, oh no!', 'Sandwichlady');
end;

{*******************************************************************************
Function R_SolveSandwichRandom: Boolean;
By: Cstrike/???
Description: Solves it. Remodelled by Cstrike from crap to a failsafe solver.
Watch it go out of date and then I look like the ass.
*******************************************************************************}
Function R_SolveSandwichRandom: Boolean;
var
  Item: Integer;
  ThePoint: TPoint;
begin
  if not R_InSandwichLadyRandom then
    Exit;
  wait (150+random(250));
  Item := R_SandwichDetectFreeItem;
  if not ValidInterface(297) then
  begin
    R_Debug('Item detected (ID: '+ToStr(Item)+'), clicking continue to get rid of interface', 'Sandwichlady');
    ClickToContinue;
  end;
  Wait (300+random(500));
  R_SandwichWaitForSelectionScreen;
  Wait (500+random(800));
  ThePoint := R_SandwichFoodPoint(Item);
  Wait (300+random(500));
  if (ThePoint.x = -1) or (ThePoint.y = -1) then
    Exit;
  Mouse(ThePoint.x, ThePoint.y, 10, 10, True);
  R_Debug('Clicked item!', 'Sandwichlady');
  wait (1000+random(2000));
  Result := R_ExitSandwichRandom;
  if Result then
    Wait (500+random(1500));
end;
