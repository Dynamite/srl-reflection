const
  R_FORESTERID = 2458;

  R_ONETAIL = 2459;
  R_TWOTAIL = 2460;
  R_THREETAIL = 2461;
  R_FOURTAIL = 2462;

  R_MEATID = 6178;

  R_FORESTERPORTALID = 8972;

Function r_InForester: Boolean;
begin
  Result := ValidNPCNull(R_FORESTERID);
end;

Function r_ForesterWants: Integer;
var
  S: String;
begin
  Result := -1;

  S := GetInterfaceText(242, 4);
  Delete(S, 1, Pos('kill a', S)+6);
  Delete(S, Pos('-', S), Length(S));

  Case S of
    'one': Result := R_ONETAIL;
    'two': Result := R_TWOTAIL;
    'three': Result := R_THREETAIL;
    'four': Result := R_FOURTAIL;
  end;
  r_Debug('Going to look for ' + S + ' tailed pheasant!', 'Forester');
  ClickToContinue;
end;

Function r_FindForester: Boolean;
var
  NPC: TNPC;
  C: TPoint;
  iTime: Integer;
begin
  r_Debug('Finding Freaky forester..', 'Forester');

  iTime := GetSystemTime;
  Repeat
    NPC := GetNPCNull(R_FORESTERID);

    If Not TileOnMS(NPC.Tile, 0)then
    begin
      r_Debug('Tile not on MS' + ToStr(NPC.Tile) + ', walking there.', 'Forester');
      WalkToTile(NPC.Tile, 0, 0);
    end;

    C := TileToMS(NPC.Tile, 0);
    Mouse(C.X, C.Y, 5, 5, False);
    Result := WaitOption('alk-', 200+Random(100));

    If Result then
    begin
      r_Debug('Found Freaky forester!', 'Forester');
      Wait(2000+Random(1000));
      Flag;
      Exit;
    end;
  until(GetSystemTime-iTime > 30000);
  r_Debug('Took > 30 secs finding forester, result = false', 'Forester');
end;

function r_ForesterFight: boolean;
var
 T: Integer;
begin
  T := GetSystemTime + 4000;
  repeat
    wait(66)
    if (GetAnimation > -1) then
      Result := true;
  until Result or (GetSystemTime > T);
end;

Function r_ForesterKill(Seekfor: Integer): Boolean;
var
  NPCs: TNPCArray;
  C: TPoint;
  iTime, P, iTimeEx: Integer;
begin
  r_Debug('Finding pheasant..', 'Forester');

  P := Seekfor;
  iTime := GetSystemTime;
  Repeat
    NPCs := SortNPCs(GetNPCsBy(P));

    If (GetArrayLength(NPCs) = 0) then
      Exit;

    If Not TileOnMS(NPCs[0].Tile, 0)then
    begin
      r_Debug('Tile not on MS' + ToStr(NPCs[0].Tile) + ', walking there.', 'Forester');
      WalkToTile(NPCs[0].Tile, 0, 0);
      Exit;
    end;

    C := TileToMS(NPCs[0].Tile, 0);
    Mouse(C.X, C.Y, 5, 5, False);
    Result := WaitOption('tack', 200+Random(100));

    If Result then
    begin
      r_Debug('Attacked pheasant!', 'Forester');
      Wait(1000+Random(500));
      Flag;
      iTimeEx := GetSystemTime;
      While (Not Pos('ollect', GetInterfaceText(241, 4)) > 0) do
      begin
        Wait(100+Random(100));
        If (GetSystemTime - iTimeEx > 6000)then
          Exit;
      end;

      Wait(1000+Random(500));
    end;
  until(Result)or(GetSystemTime-iTime > 60000)
end;

Function r_ForesterPickup: Boolean;
var
  G: TGroundItemArray;
  I: Integer;
  C: TPoint;
begin
  G := GetItemsNear(2);
  For I:=0 to High(G)do
   If (G[I].ID = R_MEATID)then
   begin
     r_Debug('Found meat' + ToStr(G[I].Tile), 'Forester');
     C := TileToMS(G[I].Tile, 0);
     Mouse(C.X, C.Y, 3, 3, False);
     Result := WaitOption('ake', 200+Random(100));
     If Result then
     begin
       r_Debug('Picking up meat..', 'Forester');
       Wait(1000+Random(500));
       Flag;
       Exit;
     end;
   end;
end;

Function r_ForesterLastTalk: Boolean;
begin
  Result := False;
end;

Function r_ForesterPortal: Boolean;
var
  Obj: TRSObject;
  C: TPoint;
begin
  Obj := GetObjectByIDEx([R_FORESTERPORTALID], OBJECT_TYPE_INTERACTABLE, 40);
  If Not (Obj.ID = R_FORESTERPORTALID)then
  begin
    r_Debug('Problem finding leaving portal, result = false', 'Forester');
    Exit;
  end;

  If Not TileOnMS(Obj.Tile, 0)then
    WalkToTile(Obj.Tile, 0, 0);

  C := TileToMS(Obj.Tile, 0);
  MMouse(C.X, C.Y, 5, 5);
  Result := WaitUpText('ortal', 200+Random(100));

  GetMousePos(C.X, C.Y);
  Mouse(C.X, C.Y, 0, 0, Result);
  If Not Result then
    Result := WaitOption('nter', 200+Random(100));

  If Result then
  begin
    Wait(2000+Random(1000));
    Flag;
  end;
end;

Function r_SolveForester: Boolean;
var
  iTime: Integer;
  FWants: Integer;
begin
  Result := r_InForester;
  If Not Result then
    Exit;

  If Not r_FindForester then
    Exit;

  FWants := r_ForesterWants;

  iTime := GetSystemTime;
  Repeat
    r_ForesterKill(FWants);
    If (GetSystemTime - iTime > 60000)then
    begin
      r_Debug('Took more than one minute to recive food!', 'Forester');
      Exit;
    end;
  Until(r_ForesterPickup);

  If Not r_FindForester then
    Exit;

  iTime := GetSystemTime;

  Repeat
    If (GetSystemTime - iTime > 30000)then
    begin
      r_Debug('Took more than 30 secs to leave!', 'Forester');
      Exit;
    end;
  Until(r_ForesterPortal);

  Wait(1000+Random(2000));
  Result := (Not r_InForester)and(LoggedIn);
end;
