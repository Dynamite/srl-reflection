function R_InBeekeeper: boolean;
begin
  Result := ValidNPC('Bee keeper');
end;

function BuildInterfaceUp: boolean;
begin
  Result := ValidInterface(420);
end;

function TalkToKeeper: boolean;
var
  NPC: TNPC;
  P: TPoint;
  t: integer;
begin
  if not FindNPC('Bee keeper', NPC)then Exit;
  if not TileOnMS(NPC.Tile, NPC.Height * 2 / 3)then
  begin
    SetAngle(true);
    if not TileOnMS(NPC.Tile, NPC.Height * 2 / 3)then
      if not WalkToTile(NPC.Tile, 0, 0)then
        Exit;
  end;
  P := TileToMS(NPC.Tile, NPC.Height * 2 / 3);
  Mouse(P.x, P.y, 3, 3, false);
  Result := R_ChooseOption('Talk-to');
  if Result then
  begin
    MarkTime(t);
    While ((not FindNPCText('click here to')) and (TimeFromMArk(t) < 5000))do
    begin
      if charactermoving then
        MarkTime(t);
      wait(100+Random(100));
    end;
  end;
end;

function HandleKeeper: boolean;
var
  Keeper: TNPC;
begin
  if not LoggedIn then Exit;
  Result := BuildInterfaceUp;
  if Result then Exit;
  While not BuildInterfaceUp do
  begin
    if not FindNPC('Bee keeper', Keeper)then Exit;
    if not(InteractingWithMe(keeper))then
      TalkToKeeper;
    ClickToContinue;
    if(FindNPCText('yeah, let me'))then
    begin
      Mouse(260, 444, 15, 3, true);
      wait(800+Random(2000));
    end;
  end;
end;

function GetSlotChild(slot: integer): Integer;
begin
  case Slot of
    1: Result := 25;
    2: Result := 22;
    3: Result := 23;
    4: Result := 21;
    else
    begin
      Writeln('Invalid slot number.');
      Result := -1;
    end;
  end;
end;

function GetPieceIDAt(Slot: Integer): Integer;
begin
  if not ValidInterface(420)then Exit;
  Result := GetModelID(420, GetSlotChild(Slot));
end;

procedure MovePiece(From, toSlot: Integer);
var
  IFace, Child, EndChild, x, y: Integer;
  TL, BR, P: TPoint; //Top left, Bottom right
begin
  if not ValidInterface(420) then Exit;
  Writeln('[Reflection] Moving peice!');

  case From of
    1: Child := 12;
    2: Child := 13;
    3: Child := 14;
    4: Child := 15;
  end;
  case toSlot of
    1: EndChild := 16;
    2: EndChild := 17;
    3: EndChild := 18;
    4: EndChild := 19;
  end;

  //Clicking component slot.
  IFace := GetInterface(420, Child);
  TL.x := SmartGetFieldInt(IFace, hook_interface_GetX);
  TL.y := SmartGetFieldInt(IFace, hook_interface_GetY);

  BR.x := SmartGetFieldInt(IFace, hook_interface_GetWidth) + TL.x;
  BR.y := SmartGetFieldInt(IFace, hook_interface_GetHeight) + TL.y;

  P := MiddleTPA([TL, BR]);
  MMouse(p.x, p.y, 10, 5);
  GetMousePos(x, y);
  HoldMouse(x, y, 1);
  SmartFreeObject(IFace);

  //Moving mouse to destination slot.
  IFace := GetInterface(420, EndChild);
  TL.x := SmartGetFieldInt(IFace, hook_interface_GetX);
  TL.y := SmartGetFieldInt(IFace, hook_interface_GetY);

  BR.x := SmartGetFieldInt(IFace, hook_interface_GetWidth) + TL.x;
  BR.y := SmartGetFieldInt(IFace, hook_interface_GetHeight) + TL.y;

  P := MiddleTPA([TL, BR]);
  MMouse(p.x, p.y, 10, 5);
  GetMousePos(x, y);
  ReleaseMouse(x, y, 1);
  SmartFreeObject(IFace);

end;

function R_SolveBeekeeper: boolean;
var
  i, ID, t: integer;
begin
  if not R_InBeekeeper then Exit;
  while(R_InBeekeeper)do
  begin
    if not BuildInterfaceUp then
    begin
      HandleKeeper;
    end else
    begin
      for i := 1 to 4 do
      begin
        ID := GetPieceIDAt(i);
        case ID of
          16036: MovePiece(i, 1);
          16025: MovePiece(i, 2);
          16022: MovePiece(i, 3);
          16034: MovePiece(i, 4);
        end;
        wait(300+Random(1000));
      end;
      Mouse(216, 277, 8, 8, true);
      MarkTime(t);
      while(R_InBeekeeper and (TimeFromMark(t) < 10000))do
      begin
        ClickToContinue;
        Wait(300+Random(300));
      end;
    end;
  end;
  ClickToContinue;
  Result := not R_InBeekeeper;
end;
