//------------------------------------------------------------------\\
//--               Simba Reflection Library                       --||
//--                    Other Routines                            --||
//------------------------------------------------------------------//

//---                               Constants                               --//
const
  CROSSHAIR_NONE = 0;
  CROSSHAIR_YELLOW = 1;
  CROSSHAIR_RED = 2;

{*******************************************************************************
function GetSettingArray: TIntegerArray;
By: Drags111
Description: Returns an int array for the runescape Settings Array.
*******************************************************************************}
function GetSettingArray: TIntegerArray;
var
  SettingArray, Data, DL, i: Integer;
begin
  try
    SettingArray := SmartGetFieldObject(0, hook_static_GetSettings);
    Data := SmartGetFieldObject(SettingArray, hook_settingarray_GetData);

    DL := SmartGetFieldArraySize(Data, '', 1);
    SetLength(Result, DL);
    for i := 0 to DL-1 do
      Result[i] := SmartGetFieldArrayInt(data, '', i); // Never change this. EVER.
      //If you don't like it, talk to Drags111 and he will change your mind.
  finally
    SmartFreeObject(Data);
    SmartFreeOBject(SettingArray);
  end;
end;

{*******************************************************************************
function GetSetting(Setting: Integer): Integer;
By: Drags111
Description: Gets the int setting value at the specified index. Used in some
            antirandoms. (demon).
Returns -1 and warns if failed
*******************************************************************************}
function GetSetting(Setting: Integer): Integer;
var
  SA: TIntegerArray;
begin
  SA := GetSettingArray;
  if(Setting < Length(SA))then
    Result := SA[Setting]
  else
  begin
    srl_Warn('GetSetting', 'Incorrect setting index passed to GetSetting', warn_AllVersions);
    Result := -1;
  end;
end;

{*******************************************************************************
function r_GetCrossHairColor: Integer;
By: pyroryan
Description: Each crosshair stays up for about 500 milliseconds
CROSSHAIR_RED: clicked on something (red crosshairs).
CROSSHAIR_YELLOW: clicked on ground (yellow crosshairs).
CROSSHAIR_NONE: nothing (no crosshairs)
*******************************************************************************}
function r_GetCrossHairColor: Integer;
begin
  Result := SmartGetFieldInt(0, hook_static_GetCrossHairColor);
end;

{*******************************************************************************
function r_WaitCrossHairColor(CrossColor: Integer; Time: Integer): Boolean;
By: pyroryan & Naike
Description: Each crosshair stays up for about 500 milliseconds
CROSSHAIR_RED: clicked on something (red crosshairs).
CROSSHAIR_YELLOW: clicked on ground (yellow crosshairs).
CROSSHAIR_NONE: nothing (no crosshairs)
Waits for a crosshair color to appear.
*******************************************************************************}
function r_WaitCrossHairColor(CrossColor: Integer; Time: Integer): Boolean;
var
  T: Integer;
begin
  Result := False;
  T := GetSystemTime + Time;
  while (GetSystemTime < T) do
  begin
    if (r_GetCrossHairColor = CrossColor) then
    begin
      Result := True;
      Exit;
    end;
    Wait(20 + Random(10));
  end;
end;
