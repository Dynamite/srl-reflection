type
  TCacheInfo = record
    Cache, Nodes, NLength: integer;
  end;

function LoadCacheInfo(CachePath: String):TCacheInfo;
begin
  with Result do
  begin
    Cache := SmartGetFieldObject(0, CachePath);
    Nodes := SmartGetFieldObject(Cache, hook_nodecache_GetNodes);
    NLength := SmartGetFieldArraySize(Nodes, '', 1);
  end;
end;

procedure FreeCacheInfo(var Info: TCacheInfo);
begin
  SmartFreeObject(Info.Nodes);
  SmartFreeObject(Info.Cache);
  Info.Nodes := 0;
  Info.Cache := 0;
  Info.NLength := 0;
end;

function GetItemNodeList(ID: Integer; Info: TCacheInfo): integer;
var
  Node, NextNode, D2NextNode, NodeID, i, index: integer;
  F: Boolean;
begin
  F := true;
  Result := 0;
  try
    Index := ID and (Info.NLength - 1);
    Node := SmartGetFieldArrayObject(Info.Nodes, '', Index);

    for i := Index downto Index-10 do
    begin
      if not F then
      begin
        Node := SmartGetFieldObject(D2NextNode, hook_node_next);
        SmartFreeObject(D2NextNode);
      end else
        F := false;
      NodeID := SmartGetFieldLongL(Node, hook_node_GetID);

      if(NodeID = ID)then
      begin
        Result := SmartGetFieldObject(Node, hook_nodelistcache_GetNodeList);
        Break;
      end;

      NextNode := SmartGetFieldObject(Node, hook_node_Previous);
      SmartFreeObject(Node);
      D2NextNode := SmartGetFieldObject(NextNode, hook_node_Previous);
      SmartFreeObject(NextNode);
    end;
  finally
    SmartFreeObject(Node);
    SmartFreeObject(NextNode);
    SmartFreeObject(D2NextNode);
  end;
end;

function GetAllItemsFromTile(NodeList: Integer; T: TTile): TGroundItemArray;
var
  Head, Node, ID, NextNode, D2NextNode, H: Integer;
  F: Boolean;
begin
  try
    Head := SmartGetFieldObject(NodeList, hook_nodelist_Head);
    Node := SmartGetFieldObject(Head, hook_node_Next);
    F := True;

    while(ID <> -1)do
    begin
      if (not F)then
      begin
        Node := SmartGetFieldObject(D2NextNode, hook_node_Previous);
        SmartFreeObject(D2NextNode);
      end else
        F := false;
      ID := SmartGetFieldInt(Node, hook_item_GetID);
      if(ID <> -1)then
      begin
        SetLength(Result, Length(Result)+1);
        H := High(Result);
        Result[H].Tile := T;
        Result[H].Stack := SmartGetFieldInt(Node, hook_item_GetStack);
        Result[H].ID := ID;
      end;
      NextNode := SmartGetFieldObject(Node, hook_node_Next);
      SmartFreeObject(Node);
      D2NextNode := SmartGetFieldObject(NextNode, hook_node_Next);
      SmartFreeObject(NextNode);
    end;
    SmartFreeObject(Head);
    SmartFreeObject(D2NextNode);
  finally
  end;
end;

{*******************************************************************************
function NewGroundItem(id, stack: integer; T: TTile): TGroundItem;
By: Drags111
Description: Returns a new instance of a TGroundItem
*******************************************************************************}
function NewGroundItem(id, stack: integer; T: TTile): TGroundItem;
begin
  Result.ID := ID;
  Result.Stack := Stack;
  Result.Tile := T;
end;



{*******************************************************************************
function GetItemsAt(T: TTile): TGroundItemArray;
By: Drags111
Description: Gets all the items on the tile.
*******************************************************************************}
function GetItemsAt(T: TTile): TGroundItemArray;
var
  plane, ID, NodeList: integer;
  Info: TCacheInfo;
begin
  try
    Info := LoadCacheInfo(hook_static_GroundItemCache);
    plane := SmartGetFieldInt(0, hook_static_LoadedPlane);
    ID := T.x or (T.y shl 14) or (plane shl 28);

    NodeList := GetItemNodeList(ID, Info);
    Writeln(ID);
    Writeln(NodeList);
    FreeCacheInfo(Info);

    if (NodeList = 0)then
    begin
      SmartFreeObject(NodeList);
      Exit;
    end;

    Result := GetAllItemsFromTile(NodeList, T);
    SmartFreeObject(NodeList);

  finally
    SmartFreeObject(NodeList);
    FreeCacheInfo(Info);
  end;
end;
