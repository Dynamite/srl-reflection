//------------------------------------------------------------------\\
//--               Simba Reflection Library                       --||
//--                    NPCs Routines                             --||
//------------------------------------------------------------------//

//---                                Records                                --//
type
{Holds information related to an NPC}
  TNPC = record
    Index, ID, Level, Animation, Height, HPRatio, Interacting,
    Orientation: integer;// SOUTH = 0; NORTH = 180; CLOCKWISE.
    Tile: TTile;
    Pixel: TPoint;//Pixel position on tile
    Name: String;
    Actions: TStringArray;
    Moving, Fighting: boolean;
  end;

{Array of TNPC}
  TNPCArray = array of TNPC;


{*******************************************************************************
function NULL_NPC: TNPC;
Description: Nulls a TNPC
*******************************************************************************}
function NULL_NPC: TNPC;
begin
  Result.Index := NULL_INT;
  Result.ID := NULL_INT;
  Result.Name := NULL_STRING;
  Result.Actions := [];
  Result.Tile := NULL_TILE;
  Result.Moving := False;
  Result.Animation := NULL_INT;
  Result.Height := NULL_INT;
  Result.HPRatio := NULL_INT;
  Result.Fighting := False;
  Result.Orientation := NULL_INT;
  Result.Level := NULL_INT;
  Result.Interacting := NULL_INT;
end;

{*******************************************************************************
function _GetNPCActionArray(NPCDef: integer): TStringArray;
By: Drags111
Description: Gets the Action (String) Array according to the NPC Def.
             Used in GetNPC functions
*******************************************************************************}
function _GetNPCActionArray(NPCDef: integer): TStringArray;
var
  i, c, bytes: integer;
begin
  SetLength(Result, 11);
  c := 0;
  for i := 0 to 10 do
  begin
    bytes := SmartGetFieldArrayObject(NPCDef, hook_npcdef_GetActions, i);
    if(bytes > 0)then
    begin
      Result[c] := GetJavaString(bytes, 255);
      inc(c);
    end;
    SmartFreeObject(bytes);
  end;
  SetLength(Result, c);
end;

{*******************************************************************************
Function SortNPCs(NPCs:array of TNPC):array of TNPC;
By: Widget edited by lordsaturn
Description: Sorts NPCs by distance from you.
*******************************************************************************}
function SortNPCs(NPCs:array of TNPC): TNPCArray;
var
  i,i2, L: integer;
  tpa: TPointArray;
begin
  L := GetArrayLength(NPCs);
  if L < 1 then Exit;
  SetArrayLength(TPA, L);
  SetArrayLength(Result, L);
  for i := 0 to L-1 do
    TPA[i] := NPCs[i].Tile;
  SortTPAFrom(TPA, GetMyPos);
  for i := 0 to L-1 do
    for i2 := 0 to L-1 do
      if (TPA[i].x=NPCs[i2].Tile.x) and (TPA[i].y=NPCs[i2].Tile.y) then
        Result[i] := NPCs[i2];
end;

{*******************************************************************************
function GetNPCs: TNPCArray;
By: Drags111
Description: Stores all the loaded NPCs into an array of TNPC;
*******************************************************************************}
function GetNPCs:array of TNPC;
var
  i, c, NumNPCs, Index, TheNPC, TheNPCDef, TheBytes, TheNPCNode: integer;
begin
  NumNPCs := SmartGetFieldInt(0,hook_static_NPCCount);
  if (NumNPCs < 1) then Exit;
  SetArrayLength(Result,NumNPCs);
  for i := 0 to (NumNPCs-1) do
  try
    Index := SmartGetFieldArrayInt(0, hook_static_NPCIndexArray, i);
    TheNPCNode := SmartGetFieldArrayObject(0, hook_static_NPCNodes, i);
    TheNPC := SmartGetFieldObject(TheNPCNode, hook_npcnode_GetNPC);
    TheNPCDef := SmartGetFieldObject(TheNPC, hook_npc_NPCDef);
    TheBytes := SmartGetFieldObject(TheNPCDef, hook_npcdef_GetName);

    if(lowercase(trim(GetJavaString(TheBytes, 255))) = 'null')then
      continue;
    Result[c].Index := Index;
    Result[c].ID := SmartGetFieldInt(TheNPCDef, hook_npcdef_GetID);
    Result[c].Name := GetJavaString(TheBytes, 255);
    Result[c].Actions := _GetNPCActionArray(TheNPCDef);
    Result[c].Tile.X := (SmartGetFieldInt(0, hook_static_BaseX) + (SmartGetFieldInt(TheNPC, hook_animable_PixelX) / 512));
    Result[c].Tile.Y := (SmartGetFieldInt(0, hook_static_BaseY) + (SmartGetFieldInt(TheNPC, hook_animable_PixelY) / 512));
    Result[c].Pixel.X := SmartGetFieldInt(TheNPC, hook_animable_PixelX) mod 512;
    Result[c].Pixel.Y := SmartGetFieldInt(TheNPC, hook_animable_PixelY) mod 512;
    Result[c].Moving := (SmartGetFieldInt(TheNPC, hook_character_Motion)>0);
    Result[c].Animation := SmartGetFieldInt(TheNPC, hook_character_Animation);
    Result[c].Height := iabs(SmartGetFieldInt(TheNPC, hook_character_GetHeight));
    Result[c].HPRatio := SmartGetFieldInt(TheNPC, hook_character_HPRatio) * 100 / $FF;
    Result[c].Fighting := (SmartGetFieldInt(TheNPC, hook_character_LoopCycleStatus) >
                              SmartGetFieldInt(0, hook_static_LoopCycle));
    Result[c].Orientation := Round(FixD(180 + (SmartGetFieldInt(TheNPC, hook_character_Orientation)* 45) / 2048));
    Result[c].Level := SmartGetFieldInt(TheNPCDef, hook_npcdef_GetLevel);
    Result[c].Interacting := SmartGetFieldInt(TheNPC, hook_character_GetInteracting);
    Inc(c);

  finally
    SmartFreeObject(TheNPCNode);
    SmartFreeObject(TheNPC);
    SmartFreeObject(TheNPCDef);
    SmartFreeObject(TheBytes);
  end;
  SetLength(Result, c);
end;

{*******************************************************************************
function GetNPCsNull: TNPCArray;
By: Drags111
Description: Stores all the loaded NPCs into an array of TNPC including nulls;
One line was taken out of the original.
*******************************************************************************}
function GetNPCsNull : array of TNPC;
var
  i, c, NumNPCs, Index, TheNPC, TheNPCDef, TheBytes, TheNPCNode: integer;
begin
  NumNPCs := SmartGetFieldInt(0,hook_static_NPCCount);
  if (NumNPCs < 1) then Exit;
  SetArrayLength(Result,NumNPCs);
  for i := 0 to (NumNPCs-1) do
  try
    Index := SmartGetFieldArrayInt(0, hook_static_NPCIndexArray, i);
    TheNPCNode := SmartGetFieldArrayObject(0, hook_static_NPCNodes, i);
    TheNPC := SmartGetFieldObject(TheNPCNode, hook_npcnode_GetNPC);
    TheNPCDef := SmartGetFieldObject(TheNPC, hook_npc_NPCDef);
    TheBytes := SmartGetFieldObject(TheNPCDef, hook_npcdef_GetName);

    //if (lowercase(trim(GetJavaString(TheBytes, 255))) = 'null') then continue;
    Result[c].Index := Index;
    Result[c].ID := SmartGetFieldInt(TheNPCDef, hook_npcdef_GetID);
    Result[c].Name := GetJavaString(TheBytes, 255);
    Result[c].Actions := _GetNPCActionArray(TheNPCDef);
    Result[c].Tile.X := (SmartGetFieldInt(0, hook_static_BaseX) + (SmartGetFieldInt(TheNPC, hook_animable_PixelX) / 512));
    Result[c].Tile.Y := (SmartGetFieldInt(0, hook_static_BaseY) + (SmartGetFieldInt(TheNPC, hook_animable_PixelY) / 512));
    Result[c].Pixel.X := SmartGetFieldInt(TheNPC, hook_animable_PixelX) mod 512;
    Result[c].Pixel.Y := SmartGetFieldInt(TheNPC, hook_animable_PixelY) mod 512;
    Result[c].Moving := (SmartGetFieldInt(TheNPC, hook_character_Motion)>0);
    Result[c].Animation := SmartGetFieldInt(TheNPC, hook_character_Animation);
    Result[c].Height := iabs(SmartGetFieldInt(TheNPC, hook_character_GetHeight));
    Result[c].HPRatio := SmartGetFieldInt(TheNPC, hook_character_HPRatio) * 100 / $FF;
    Result[c].Fighting := (SmartGetFieldInt(TheNPC, hook_character_LoopCycleStatus) >
                              SmartGetFieldInt(0, hook_static_LoopCycle));
    Result[c].Orientation := Round(FixD(180 + (SmartGetFieldInt(TheNPC, hook_character_Orientation)* 45) / 2048));
    Result[c].Level := SmartGetFieldInt(TheNPCDef, hook_npcdef_GetLevel);
    Result[c].Interacting := SmartGetFieldInt(TheNPC, hook_character_GetInteracting);
    Inc(c);

  finally
    SmartFreeObject(TheNPCNode);
    SmartFreeObject(TheNPC);
    SmartFreeObject(TheNPCDef);
    SmartFreeObject(TheBytes);
  end;
  SetLength(Result, c);
end;

{*******************************************************************************
function ValidNPCNull(ID: Integer): Boolean;
By: Drags111/Naike
Description: Returns the npc by the ID.
*******************************************************************************}
function ValidNPCNull(ID: Integer): Boolean;
var
  NPCs: TNPCArray;
  i, Hi: Integer;
begin
  NPCs := SortNPCS(GetNPCsNull);
  Hi := High(NPCs);
  for i := Hi downto 0 do
  begin
    Result := (NPCs[i].ID = ID);
    if Result then
      Exit;
  end;
end;

{*******************************************************************************
function GetNPCNull(ID: Integer):TNPC;
By: Drags111/Naike
Description: Returns the npc by the ID.
*******************************************************************************}
function GetNPCNull(ID: Integer):TNPC;
var
  NPCs: TNPCArray;
  i, Hi: Integer;
begin
  Result := NULL_NPC;
  NPCs := SortNPCS(GetNPCsNull);
  Hi := High(NPCs);
  for i := Hi downto 0 do
   if (NPCs[i].ID = ID) then
   begin
     Result := NPCs[i];
     Exit;
   end;
end;

{*******************************************************************************
function GetNPCsBy(TheVar: Variant): array of TNPC;
By: Widget, lordsaturn, Narcle and Nava2
Description: Returns all the currently loaded NPCs using TheVar, which will
             take either a string or an Integer. The String is a part of the NPC
             name, and an Integer is the NPCType (ID).
*******************************************************************************}
function GetNPCsBy(TheVar: Variant): TNPCArray;
var
  vType, i, resCounter, Hi: Integer;
  NPCs: TNPCArray;
  b: boolean;
begin
  {
    Initialize the result array, setup for looping.
  }
  NPCs := SortNPCs(GetNPCs);
  SetLength(Result, Length(NPCs));
  vType := VarType(TheVar);
  if (vType = varString) then
    TheVar := LowerCase(Trim(TheVar));
  Hi := High(NPCs);
  for i := Hi downto 0 do
  begin
    case vType of
      varInteger: B := NPCs[i].ID = TheVar;
      varString: B := (Pos(TheVar, LowerCase(Trim(NPCs[i].Name))) > 0);
      else Exit;
    end;
    if not B then
      Continue;
    Result[resCounter] := NPCs[i];
    inc(resCounter);
  end;

  SetLength(Result, resCounter);
end;

{*******************************************************************************
function GetNPC(theVar: Variant):TNPC;
By: Drags111
Description: Returns the npc by the varient (name or ID).
*******************************************************************************}
function GetNPC(theVar: Variant):TNPC;
var
  NPCs: TNPCArray;
  i, vType, Hi: Integer;
  B: Boolean;
begin
  Result := NULL_NPC;
  vType := VarType(TheVar);
  if (vType = varString) then
    TheVar := LowerCase(TheVar);
  NPCs := SortNPCS(GetNPCs);
  Hi := High(NPCs);
  for i := Hi downto 0 do
  begin
    case (vType) of
      varInteger: B := NPCs[i].ID = TheVar;
      varString: B := (Pos(TheVar, LowerCase(NPCs[i].Name)) > 0);
      else Continue;
    end;
    if (B) then
    begin
      Result := NPCs[i];
      Exit;
    end;
  end;
end;

{*******************************************************************************
function GetNPCsAt(T: TTile): TNPCArray;
By:
Description: Returns an array of the NPCs at the given tile
*******************************************************************************}
function GetNPCsAt(T: TTile): TNPCArray;
var
  i, h, c: Integer;
  Index, TheNPCNode, TheNPC, TheNPCDef, TheBytes: Integer;
  tmp_tile : TTile;
begin
  h := SmartGetFieldInt(0, hook_static_NPCCount);
  SetLength(Result, h);
  Dec(h);
  for i := 0 to h do
  try
    Index := SmartGetFieldArrayInt(0, hook_static_NPCIndexArray, i);
    TheNPCNode := SmartGetFieldArrayObject(0, hook_static_NPCNodes, i);
    TheNPC := SmartGetFieldObject(TheNPCNode, hook_npcnode_GetNPC);
    tmp_tile := Tile(
		   SmartGetFieldInt(0,hook_static_BaseX) +
			SmartGetFieldInt(TheNPC, hook_animable_PixelX) / 512,
		   SmartGetFieldInt(0,hook_static_BaseY) +
			SmartGetFieldInt(TheNPC, hook_animable_PixelY) / 512);

    if (tmp_tile = t) then
    begin
      TheNPCDef := SmartGetFieldObject(TheNPC, hook_npc_NPCDef);
      TheBytes := SmartGetFieldObject(TheNPCDef, hook_npcdef_GetName);
      Result[c].Index := Index;
      Result[c].ID := SmartGetFieldInt(TheNPCDef, hook_npcdef_GetID);
      Result[c].Name := GetJavaString(TheBytes, 255);
      Result[c].Actions := _GetNPCActionArray(TheNPCDef);
      Result[c].Tile.X := (SmartGetFieldInt(0, hook_static_BaseX) + (SmartGetFieldInt(TheNPC, hook_animable_PixelX) / 512));
      Result[c].Tile.Y := (SmartGetFieldInt(0, hook_static_BaseY) + (SmartGetFieldInt(TheNPC, hook_animable_PixelY) / 512));
      Result[c].Moving := (SmartGetFieldInt(TheNPC, hook_character_Motion)>0);
      Result[c].Animation := SmartGetFieldInt(TheNPC, hook_character_Animation);
      Result[c].Height := iabs(SmartGetFieldInt(TheNPC, hook_character_GetHeight));
      Result[c].HPRatio := SmartGetFieldInt(TheNPC, hook_character_HPRatio) * 100 / $FF;
      Result[c].Fighting := (SmartGetFieldInt(TheNPC, hook_character_LoopCycleStatus) >
                              SmartGetFieldInt(0, hook_static_LoopCycle));
      Result[c].Orientation := Round(FixD(180 + (SmartGetFieldInt(TheNPC, hook_character_Orientation)* 45) / 2048));
      Result[c].Level := SmartGetFieldInt(TheNPCDef, hook_npcdef_GetLevel);
      Result[c].Interacting := SmartGetFieldInt(TheNPC, hook_character_GetInteracting);
      Inc(c);
    end;
  finally
    SmartFreeObject(TheNPCNode);
    SmartFreeObject(TheNPC);
  end;
  SetLength(Result, c);
end;

{*******************************************************************************
function FindNPC(theVar: Variant; var NPC: TNPC): Boolean;
By: lordsaturn
Description: If the NPC is found according to theVar, the NPC is placed in the
NPC variable. Results true if found; false otherwise.
*******************************************************************************}
function FindNPC(theVar: Variant; var NPC: TNPC): Boolean;
begin
  NPC := GetNPC(theVar);
  Result := NPC.ID > -1;
end;

{*******************************************************************************
function ValidNPC(theVar: Variant): Boolean;
By: lordsaturn
Description: Results true if the npc is found
*******************************************************************************}
function ValidNPC(theVar: Variant): Boolean;
var
  NPC: TNPC;
begin
  Result := FindNPC(theVar, NPC);
end;

{*******************************************************************************
procedure DumpNPCs(NPCs: TNPCArray);
By: Drags111
Description: Prints out the array of NPCs. Mainly for debugging purposes.
*******************************************************************************}
procedure DumpNPCs(NPCs: TNPCArray);
var
  i, Hi: integer;
begin
  Hi := High(NPCs);
  for i := 0 to Hi do
  begin
    Writeln('NPC: '+NPCs[i].Name);
    Writeln('    '+'Index: '+ ToStr(NPCs[i].Index));
    Writeln('    '+'ID: '+ToStr(NPCs[i].ID));
    Writeln('    '+'Actions: '+ ToStr(NPCs[i].Actions));
    Writeln('    '+'Tile: '+ ToStr(NPCs[i].Tile));
    Writeln('    '+'Animation: '+ ToStr(NPCs[i].Animation));
    Writeln('    '+'Height: '+ ToStr(NPCs[i].Height));
    Writeln('    '+'Fighting: '+ ToStr(NPCs[i].Fighting));
    Writeln('    '+'IsMoving: '+ ToStr(NPCs[i].Moving));
    Writeln('    '+'HPRatio: '+ ToStr(NPCs[i].HPRatio));
    Writeln('    '+'Level: '+ ToStr(NPCs[i].Level));
    Writeln('    '+'Orientation: '+ ToStr(NPCs[i].Orientation));
    Writeln('    '+'Interacting: '+ ToStr(NPCs[i].Interacting));
  end;
end;
