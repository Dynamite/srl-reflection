procedure R_NextPlayer(Active: Boolean); forward;
procedure R_RandomNextPlayer(Active: Boolean); forward;

{*******************************************************************************
function GetLoginIndex: integer;
By: Drags111
Description: Returns the value of the LoginIndex hook.
*******************************************************************************}
function GetLoginIndex: integer;
begin
  Result := SmartGetFieldInt(0, hook_static_LoginIndex);
end;

{*******************************************************************************
function R_RSReady: Boolean;
By: Drags111
Description: Returns true if runescape is logged in or in the menu.
*******************************************************************************}
function R_RSReady: Boolean;
begin
  Result := (R_LoggedIn) or (GetLoginIndex = 2);
end;

{*******************************************************************************
function R_LobbyScreen: Boolean;
By: Drags111
Description: Returns true if we are at the Lobby Screen
*******************************************************************************}
function R_LobbyScreen: Boolean;
begin
  Result := (GetLoginIndex = 6);
end;

{*******************************************************************************
function R_LoginPlayerToLob: Boolean;
By: Drags111 based off The SRL Team's LoginPlayerToLob
Description: Like LoginPlayer but only to the lobbyscreen.
*******************************************************************************}
function R_LoginPlayerToLob: Boolean;
var
  Members, RetryLogin: Boolean;
  Actions: TVariantArray;
  T, Attempts: LongInt;
  TPA: TPointArray;
label
  ProcStart;
begin
  ActivateClient;
  Wait(100);
  TypeByte(vk_Escape);
  Wait(500);

         {Check for lobby screen already open/ already logged in}

  Result := ((R_LobbyScreen) or (R_LoggedIn));
  if (Result) then
    Exit;

                       {Check for active player.}

  if (not (Players[CurrentPlayer].Active)) then
  begin
    WriteLn('Player is not Active...');
    if (AllPlayersInActive) then
    begin
      WriteLn('All players not active!');
      Exit;
    end;
    R_NextPlayer(False);
    Exit;
  end;

               {Wait for the client to finish loading.}

  T := GetSystemTime;
  repeat
    if (R_RSReady) then
      Break;
    if ((GetSystemTime - T) > 180000) then
    begin
      WriteLn('It has been 3 minutes and Runescape is not yet ready... Terminating.');
      TerminateScript;
    end;
    Wait(RandomRange(1000, 2000));
  until (False);
  WriteLn('Welcome to Runescape.');

                   {Click less info if needed.}

  if (not (SimilarColors(GetColor(382, 11), 14285562, 15))) then //Runescae sword green bead
  begin
    MouseBox(212, 479, 550, 495, 1); //Less info button
    Wait(RandomRange(1000, 2000));
  end;

                      {Click Members/free.}

  Members := Players[CurrentPlayer].Member;
  if (Length(Players[CurrentPlayer].WorldInfo) > 0) then
    Members := Players[CurrentPlayer].WorldInfo[0];

  ProcStart:

  if (GetColor(248, 359) <> 1381653) then //Black outline on forgotten pwd button.
  begin

    if (Members) then
      MouseBox(482, 420, 648, 447, 1) //Member's login button
    else
      MouseBox(299, 421, 463, 447, 1); //Free's login button

    T := GetSystemTime;                  //Black outline on forgotten pwd button.
    while ((GetSystemTime - T < 3000) and (GetColor(248, 359) <> 1381653)) do
      Wait(RandomRange(100, 200));

  end;

                       {Type in username}

  FindColors(TPA, clWhite, 255, 216, 511, 236);
  if (Length(TPA) > 0) then
  begin
    SortTPAFrom(TPA, Point(501, 225));
    Mouse(TPA[0].X + 20, TPA[0].Y, 5, 5, True);
  end
  else
    MouseBox(254, 216, 440, 234, 1); //Username box
  while (CountColor(16777215, 255, 215, 385, 230) > 0) do
  begin
    TypeByte(VK_BACK);
    Wait(50+Random(50));
  end;
  Wait(100 + Random(200));
  WriteLn(Capitalize(Players[CurrentPlayer].Name));
  TypeSend(Players[CurrentPlayer].Name);
  Wait(100 + Random(50));

                       {Type in password}

  while (CountColor(16777215, 255, 270, 385, 285) > 0) do
  begin
    TypeByte(VK_BACK);
    Wait(50 + Random(50));
  end;
  Wait(100 + Random(200));
  TypeSend(Players[CurrentPlayer].Pass);
  Wait(500 + Random(300));

                        {Check responses}

  T := GetSystemTime;
  repeat

    SetLength(Actions, 0);

    if ((GetSystemTime - T) > 60000) then
      Actions :=       ['One minute has passed...',              0,    0,    'PlayerFalse',   'Login Failed']
    else
    case (CountColor(16777215, 253, 170, 510, 290)) of //text colour points
                        // WriteLn Error                  Wait for   Retrys     Action      Player[CurrentPlayer].Loc
      949: Actions :=  ['Invalid Username / Password',           0,    2,    'PlayerFalse',   'Wrong User/Pass'];
      1222: Actions := ['Error Connecting.',                 20000,    9,    'Terminate',     'Error Connecting'];
      1316: Actions := ['Runescape has been updated.',           0,    0,    'Terminate',     'RS updated'];
      1506: Actions := ['Your account is already logged in',  5000,    0,    'PlayerTrue',    'Already logged in'];
      1608: Actions := ['Not a Members Account',                 0,    1,    'PlayerTrue',   ''];
      1610: Actions := ['Too many incorrect logins.',    5 * 60000,    2,    'PlayerFalse',    'Too many logins'];
      1994: Actions := ['Your account has been disabled',        0,    0,    'PlayerFalse',   'Acc Disabled'];
    end;
                             {Respond}

    if (Length(Actions) > 0) then
    begin
      WriteLn(Actions[0]);
      if (Actions[0] <> 'Not a Members Account') then
      begin
        Wait(1000 + Random(500));
        TypeByte(vk_Escape);
      end;
      Wait(Actions[1] + Random(100));
      if (Actions[2] <> 0) then
        if (Attempts < Actions[2]) or (Actions[2] = -1) then
        begin
          if (Actions[0] = 'Not a Members Account') then
          begin
            Players[CurrentPlayer].Member := False;
            if (Length(Players[CurrentPlayer].WorldInfo) > 0) then
              Players[CurrentPlayer].WorldInfo[0] := False;
            MouseBox(267, 321, 496, 350, 1); //Play free game instead button
            Wait(3000 + Random(2000));
            Result := True;
            Exit;
          end;
          RetryLogin := True;
          Wait(2000 + Random(1000));
          Break;
        end;
      if (Actions[4] <> '') then
        Players[CurrentPlayer].Loc := Actions[4];
      case Actions[3] of
        'PlayerFalse': R_NextPlayer(False);
        'PlayerTrue': R_NextPlayer(True);
        'Terminate': TerminateScript;
      end;
      Exit;
    end;
    Wait(100);
    Result := (R_LobbyScreen) or (R_LoggedIn);
  until (Result);

                     {Back to main screen if needed}

  if (RetryLogin) then
  begin
    RetryLogin := False;
    Inc(Attempts);
    goto ProcStart;
  end;

end;

{*******************************************************************************
procedure R_LoginPlayer;
By: Drags111 based off The SRL Team's LoginPlayer;
Description: Logs in the Player[CurrentPlayer]. Detects most Client Login Errors
*******************************************************************************}
function R_LoginPlayer: Boolean;
var
  RetryLogin, B, BB: Boolean;
  Actions: TVariantArray;
  T, Attempts: LongInt;
label
  ProcStart;
begin
  ProcStart:

  if (not (Result)) then    {Check if Logged in}
    Result := R_LoggedIn;

  if (Result) then
  begin
    Result := True;
    AddToSRLLog('Current player: ' + Capitalize(Players[CurrentPlayer].Name));
    wait(2000+Random(2000));
    PlayerStartTime := GetSystemTime; // PlayerStartTime
    Exit;
  end;
  if (not (R_LoginPlayerToLob)) then    {Get to lobby screen}
    Exit;
  Wait(500 + Random(500));
                           {World switching}
  if (Length(Players[CurrentPlayer].WorldInfo) > 0) then
    if (Players[CurrentPlayer].WorldInfo[0]) then
      Players[CurrentPlayer].Member := True
    else
      Players[CurrentPlayer].Member := False;

  case Length(Players[CurrentPlayer].WorldInfo) of
    2: SelectWorld(Players[CurrentPlayer].WorldInfo[1]);
    3: begin
         if (Players[CurrentPlayer].WorldInfo[0]) then
           B := True
         else
           B := False;
         if (Players[CurrentPlayer].WorldInfo[2]) then
           BB := True
         else
           BB := False;
         SelectWorld(RandomWorld(B, BB));
       end;
  end;
                          {Click Here to Play}

  if (R_LobbyScreen) then MouseBox(72, 445, 570, 477, 1); //Button

                            {Check responses}

  T := GetSystemTime;
  repeat

    SetLength(Actions, 0);
    if ((GetSystemTime - T) > 60000) then
      Actions :=       ['One minute has passed...',                    0,     0,  'NextPlayer',   'Login Failed']
    else
    case (CountColor(16777215, 253, 170, 510, 290)) of //text colour points
                        // WriteLn Error                          Wait for   Retrys  Action     Player[CurrentPlayer].Loc
      1222: Actions := ['Error Connecting.',                       20000,     9,  'Terminate',    'Error Connecting'];
      2052: Actions := ['You need 20 combat for PvP',                  0,     1,  'PlayerFalse',  'PvP warning'];
      2106: Actions := ['You are standing in a members-only area.',    0,     1,  'PlayerFalse',  'In Mems-Only Area'];
      2810: Actions := ['Not a Members Account',                       0,     1,  'PlayerFalse',  'Non-member'];
    end;

    if (CountColor(clWhite, 415, 336, 476, 356)= 210) then //PVP login button white colour points
    begin
      if (Length(Players[CurrentPlayer].WorldInfo) > 2) then
      begin
        if (Players[CurrentPlayer].WorldInfo[2]) then
          MouseBox(389, 332, 502, 354, 1); //PvP login button
      end
      else
        if (AllowPVP) then
          MouseBox(389, 332, 502, 354, 1)
        else
          Players[CurrentPlayer].WorldInfo := [Players[CurrentPlayer].Member, 0, AllowPVP];
      Wait(3000 + Random(2000));
    end;

                             {Respond}

    if (Length(Actions) > 0) then
    begin
      WriteLn(Actions[0]);
      Wait(Actions[1] + Random(100));
      if (Actions[2] <> 0) then
        if (Attempts < Actions[2]) or (Actions[2] = -1) then
        begin
          case Actions[0] of
            'You are standing in a members-only area.': begin
                                                          Players[CurrentPlayer].Member := True;
                                                          Players[CurrentPlayer].WorldInfo := [True, 0, AllowPVP];
                                                        end;
            'You need 20 combat for PvP': Players[CurrentPlayer].WorldInfo := [Players[CurrentPlayer].Member, 0, False];
            'Not a Members Account': begin
                                       Players[CurrentPlayer].Member := False;
                                       Players[CurrentPlayer].WorldInfo := [False, 0, AllowPVP];
                                     end;
          end;
          RetryLogin := True;
          Wait(2000 + Random(1000));
          Break;
        end;
      if (Actions[4] <> '') then
        Players[CurrentPlayer].Loc := Actions[4];
      case Actions[3] of
        'PlayerFalse': R_NextPlayer(False);
        'PlayerTrue': R_NextPlayer(True);
        'Terminate': TerminateScript;
      end;
      Exit;
    end;
    Wait(100);
    Result := (R_LoggedIn);
  until (Result);

                     {Back to lobby screen if needed}

  if (RetryLogin) then
  begin
    RetryLogin := False;
    Inc(Attempts);
    goto ProcStart;
  end;

                      {Set player start time ect...}

  if (Result) then
    goto ProcStart;

end;

{*******************************************************************************
function SwitchToPlayer(PlayerNo: Integer; Active: Boolean): Boolean;
By: Dankness, Ron, Raymond & ZephyrsFury
Description: Switches to a specific player, setting the current player's
  activity to True or False.
*******************************************************************************}
function R_SwitchToPlayer(PlayerNo: Integer; Active: Boolean): Boolean;
begin
  WriteLn('R_SwitchToPlayer(PlayerNo: ' + IntToStr(PlayerNo) + ', Active: ' + BoolToStr(Active)+ ');');
  Players[CurrentPlayer].Active := Active;
  Logout;
  if (SRL_Procs[srl_OnNextPlayer] <> nil) then
    SRL_Procs[srl_OnNextPlayer]();
  PlayerCurTime := GetSystemTime;
  Players[CurrentPlayer].Worked := Players[CurrentPlayer].Worked + (PlayerCurTime - PlayerStartTime);
  CurrentPlayer := PlayerNo;
  SRL_Logs := SRL_Logs + 1;
  R_LoginPlayer;
  Result := R_LoggedIn;
end;

{*******************************************************************************
procedure R_NextPlayer(Active: Boolean);
By: ZephyrsFury
Description: Logs in the next player that isn't inactive.
Boolean: True - Current player is ok. False - Current player is false.
*******************************************************************************}
procedure R_NextPlayer(Active: Boolean);
var
  srl_PlayerIndexFunc: function: Integer;
  cP: Integer;
begin
  if (RandomPlayer) then
    srl_PlayerIndexFunc := @RandomPlayerIndex
  else
    srl_PlayerIndexFunc := @NextPlayerIndex;

  WriteLn('NextPlayer');
  LogOut;
  cP := srl_PlayerIndexFunc();
  while (cP = -1) do
  begin
    cP := srl_PlayerIndexFunc();
    if (SRL_Procs[srl_InNextPlayerLoop] <> nil) then
      SRL_Procs[srl_InNextPlayerLoop]();
    Wait(5000); //Endless loop
  end;

  R_SwitchToPlayer(cP, Active);
end;

{*******************************************************************************
procedure R_RandomNextPlayer(Active: Boolean);
By: ZephyrsFury
Description: Logs in a random player that isn't inactive.
Boolean: True - Current player is ok. False - Current player is false.
*******************************************************************************}
procedure R_RandomNextPlayer(Active: Boolean);
var
  tmpBool: Boolean;
begin
  tmpBool := RandomPlayer;
  RandomPlayer := True;
  NextPlayer(Active);
  RandomPlayer := tmpBool;
end;
