{------------------------------------------------------------------------------]
|                            Banking Procedures                                |
[------------------------------------------------------------------------------]
| - All banking procedures go here                                             |
| * Need to add the super bank finding procedure thing                         |
|                                                                              |
|                                                                              |
[------------------------------------------------------------------------------}

const
  I_Bank_PinInterface = 13;
  I_Bank_Interface = 762;
  I_Bank_DepositInterface = 11; // Edit this later
  I_Bank_DepositBoxInterface = I_Bank_DepositInterface; // Inherit
  I_Bank_ActiveTab = 1419;
  I_Bank_InactiveTab = 1421;
  I_Bank_MaxItems = 515;
  I_Bank_ItemRelativeX = 30;
  I_Bank_ItemRelativeY = 87;

{*******************************************************************************
function I_ReturnGrandExchangeMidPrice : Integer;
By: Cstrike
Description: Returns GE mid data.
*******************************************************************************}
function I_ReturnGrandExchangeMidPrice (ItemID : Integer) : Integer;
begin
  Result := StrToInt(GetNumbers(Between('t price:</b> ', '<', Getpage('http://itemdb-rs.runescape.com/viewitem.ws?obj=' + IntToStr(ItemID)))));
end;

{*******************************************************************************
function I_WaitUntilPinOrBankScreen (timeMs : Integer) : Boolean;
By: Cstrike
Description: Waits until timeout for bank/pin screen
*******************************************************************************}
function I_WaitUntilPinOrBankScreen (timeMs : Integer) : Boolean;
var
  t : Integer;
begin
  Result := False;
  if not I_LoggedIn then Exit;
  MarkTime(t);
  repeat
    wait (50);
    if ValidInterface (I_Bank_PinInterface) or ValidInterface (I_Bank_Interface) then Break;
  until (TimeFromMark(t) > timeMs)
  Result := not (TimeFromMark(t) > timeMs);
end;

{*******************************************************************************
function I_WaitDepositScreen (timeMs : Integer) : Boolean;
By: Cstrike
Description: Waits until timeout for deposit screen
*******************************************************************************}
function I_WaitDepositScreen (timeMs : Integer) : Boolean;
var
  t : Integer;
begin
  Result := False;
  if not I_LoggedIn then Exit;
  MarkTime(t);
  repeat
    wait (50);
    if ValidInterface (I_Bank_DepositInterface) then Break;
  until (TimeFromMark(t) > timeMs)
  Result := ValidInterface (I_Bank_DepositInterface);
end;

{*******************************************************************************
function I_AnyBankScreen : Boolean;
By: Cstrike
Description: Returns true if at any bank screen.
*******************************************************************************}
function I_AnyBankScreen : Boolean;
begin
  Result := ValidInterface (I_Bank_PinInterface)
              or ValidInterface (I_Bank_Interface)
                or ValidInterface (I_Bank_DepositInterface);
end;

{*******************************************************************************
function I_WaitUntilAnyBankScreen (timeMs : Integer) : Boolean;
By: Cstrike
Description: Waits until timeout for bank/pin/deposit screen.
*******************************************************************************}
function I_WaitUntilAnyBankScreen (timeMs : Integer) : Boolean;
var
  t : Integer;
begin
  Result := False;
  if not I_LoggedIn then Exit;
  MarkTime(t);
  repeat
    wait (50);
    if I_AnyBankScreen then Break;
  until (TimeFromMark(t) > timeMs)
  Result := I_AnyBankScreen;
end;
{*******************************************************************************
function I_CloseAllBankScreens : Boolean;
By: Cstrike
Description: [Attempts to] Close all bank screens. True if none are present.
*******************************************************************************}
function I_CloseAllBankScreens : Boolean;
begin
  if not LoggedIn then Exit;
  Result := False;
  if ValidInterface(I_Bank_DepositInterface) then I_GMouse(435, 43, 3, 3, true);
  if ValidInterface(I_Bank_Interface) then CloseBank;
  wait (500+random(500));
  Result := not I_AnyBankScreen;
end;

{*******************************************************************************
function I_EnterPin (pin : String) : Boolean;
By: Cstrike
Description: Enters pin if interface is open.
*******************************************************************************}
function I_EnterPin (Pin : String) : Boolean;
var
  t : Integer;
begin
  Result := False;
  if not I_LoggedIn then Exit;
  if ValidInterface(I_Bank_Interface) then
  begin
    Result := True;
    Exit;
  end;
  if not ValidInterface(I_Bank_PinInterface) then Exit;
  if not (Length(Pin) = 4) and  not (Length(Pin) = 0) then
  begin
    Writeln ('[Infinity] Pin length is wrong');
    Exit;
  end;
  MMouse (525, 6, 219, 482);
  wait (500+random(500));
  InPin (Pin);
  MarkTime(t);
  repeat
    wait (300+random(200));
  until (TimeFromMark(t) > 10000) or ValidInterface(I_Bank_PinInterface)
  Result := ValidInterface(I_Bank_PinInterface);
end;

{*******************************************************************************
function I_ReturnBankerNPCIDs  : TIntegerArray;
By: Cstrike
Description: Returns all possible bank data for that type.
These are thanks to RSBot.
*******************************************************************************}
function I_ReturnBankerNPCIDs  : TIntegerArray;
begin
  Result := [44, 45, 494, 495, 499, 958, 1036,
      			2271, 2354, 2355, 3824, 5488, 5901, 5912, 5913, 6362, 6532, 6533,
      			6534, 6535, 7605, 8948, 14367];
end;

{*******************************************************************************
function I_ReturnBankBoothIDs  : TIntegerArray;
By: Cstrike
Description: Returns all possible bank data for that type.
These are thanks to RSBot.
*******************************************************************************}
function I_ReturnBankBoothIDs  : TIntegerArray;
begin
  Result := [2213, 4483, 6084, 11402, 11758,
      			12759, 14367, 19230, 24914, 25808, 26972, 27663, 29085, 34752,
      			3564];
end;

{*******************************************************************************
function I_ReturnBankChestIDs  : TIntegerArray;
By: Cstrike
Description: Returns all possible bank data for that type.
These are thanks to RSBot.
*******************************************************************************}
function I_ReturnBankChestIDs  : TIntegerArray;
begin
  Result := [4483, 12308, 21301, 27663, 42192];
end;

{*******************************************************************************
function I_ReturnBankDepositBoxIDs  : TIntegerArray;
By: Cstrike
Description: Returns all possible bank data for that type.
These are thanks to RSBot.
*******************************************************************************}
function I_ReturnBankDepositBoxIDs  : TIntegerArray;
begin
  Result := [9398, 20228, 26969, 36788];
end;

{*******************************************************************************
function I_MoveToClosestBankMM (NameType : String; MouseRandomness : Integer) : Boolean;
By: Cstrike
Description: Goes to bank based on type if tile on MM. NameType can be one of
four things: bankbooth (or booth), banker, chest, deposit (depositbox, ...etc )
*******************************************************************************}
function I_MoveToClosestBankMM (NameType : String; MouseRandomness : Integer) : Boolean;
var
  BankerIDs, BankBoothIDs, ChestIDs, DepositBoxIDs : TIntegerArray;
  BankerNPCs : TNPCArray;
  BankerObjects : TRSObjectArray;
  TileArray : TTileArray;
  ClosestTile : TTile;
  i, t : Integer;
begin
  Result := False;
  if not I_LoggedIn then Exit;

  case lowercase(NameType) of
    'bankbooth', 'bank booth', 'bank_booth', 'booth', 'bank':
    begin
      BankBoothIDs := I_ReturnBankBoothIDs;
      BankerObjects := GetObjectsByIDEx (BankBoothIDs, OBJECT_TYPE_INTERACTABLE, I_Minimap_Radius);
      if high(BankerObjects) < 0 then Exit;
      SetArrayLength (TileArray, high(BankerObjects)+1);
      for i:=0 to high(BankerObjects) do
      begin
        TileArray[i] := BankerObjects[i].Tile;
      end;
      ClosestTile := I_ReturnClosestTileFromTileArray(TileArray);
      if TileOnMS (ClosestTile, 0) then
      begin
        Result := True;
        Exit;
      end;
      if TileOnMM (ClosestTile) then
      begin
        I_MouseToTileMM (ClosestTile, true, MouseRandomness);
        MarkTime(t);
        repeat
          wait (25+random(25));
        until (DistanceFrom(ClosestTile) <= 3) or (TimeFromMark(t) > 12000)
        Result := (DistanceFrom(ClosestTile) <= 3);
      end;
    end;

    'banker', 'banker npc', 'banker_npc', 'bank guy':
    begin
      BankerIDs := I_ReturnBankerNPCIDs;
      BankerNPCs := SortNPCs(GetNPCsBy(BankerIDs)); // Possible error
      if high(BankerObjects) < 0 then Exit;
      SetArrayLength (TileArray, high(BankerNPCs)+1);
      for i:=0 to high(BankerNPCs) do
      begin
        TileArray[i] := BankerNPCs[i].Tile;
      end;
      ClosestTile := I_ReturnClosestTileFromTileArray(TileArray);
      if TileOnMS (ClosestTile, 0) then
      begin
        Result := True;
        Exit;
      end;
      if TileOnMM (ClosestTile) then
      begin
        I_MouseToTileMM (ClosestTile, true, MouseRandomness);
        MarkTime(t);
        repeat
          wait (25+random(25));
        until (DistanceFrom(ClosestTile) <= 3) or (TimeFromMark(t) > 12000)
        Result := (DistanceFrom(ClosestTile) <= 3);
      end;

    end;

    'chest', 'bank chest':
    begin
      ChestIDs := I_ReturnBankChestIDs;
      BankerObjects := GetObjectsByIDEx (BankBoothIDs, OBJECT_TYPE_INTERACTABLE, I_Minimap_Radius);
      if high(BankerObjects) < 0 then Exit;
      SetArrayLength (TileArray, high(BankerObjects)+1);
      for i:=0 to high(BankerObjects) do
      begin
        TileArray[i] := BankerObjects[i].Tile;
      end;
      ClosestTile := I_ReturnClosestTileFromTileArray(TileArray);
      if TileOnMS (ClosestTile, 0) then
      begin
        Result := True;
        Exit;
      end;
      if TileOnMM (ClosestTile) then
      begin
        I_MouseToTileMM (ClosestTile, true, MouseRandomness);
        MarkTime(t);
        repeat
          wait (25+random(25));
        until (DistanceFrom(ClosestTile) <= 3) or (TimeFromMark(t) > 12000)
        Result := (DistanceFrom(ClosestTile) <= 3);
      end;
    end;

    'deposit', 'deposit box', 'deposit_box', 'dep', 'box':
    begin
      DepositBoxIDs := I_ReturnBankDepositBoxIDs;
      BankerObjects := GetObjectsByIDEx (BankBoothIDs, OBJECT_TYPE_INTERACTABLE, I_Minimap_Radius);
      if high(BankerObjects) < 0 then Exit;
      SetArrayLength (TileArray, high(BankerObjects)+1);
      for i:=0 to high(BankerObjects) do
      begin
        TileArray[i] := BankerObjects[i].Tile;
      end;
      ClosestTile := I_ReturnClosestTileFromTileArray(TileArray);
      if TileOnMS (ClosestTile, 0) then
      begin
        Result := True;
        Exit;
      end;
      if TileOnMM (ClosestTile) then
      begin
        I_MouseToTileMM (ClosestTile, true, MouseRandomness);
        MarkTime(t);
        repeat
          wait (25+random(25));
        until (DistanceFrom(ClosestTile) <= 3) or (TimeFromMark(t) > 12000)
        Result := (DistanceFrom(ClosestTile) <= 3);
      end;
    end;
  end;

end;

{*******************************************************************************
function I_OpenBank : Boolean;
By: Cstrike
Description: Finds all common banks and opens them. Goes bank booth, then ID's,
then chests, then deposit box.
*******************************************************************************}
function I_OpenBank : Boolean;
var
  BankerIDs, BankBoothIDs, ChestIDs, DepositBoxIDs : TIntegerArray;
  BankerNPCs : TNPCArray;
  BankerObjects : TRSObjectArray;
  i : Integer;
  TP : TPoint;
begin
  Result := False;
  if not I_LoggedIn then Exit;
  BankerIDs := I_ReturnBankerNPCIDs;
  BankBoothIDs := I_ReturnBankBoothIDs;
  ChestIDs := I_ReturnBankChestIDs;
  DepositBoxIDs := I_ReturnBankDepositBoxIDs;

  // Check bank booth
  Writeln ('[Infinity: Banking] Looking for bank booths');
  BankBoothIDs := I_ReturnBankBoothIDs;
  BankerObjects := GetObjectsByIDEx (BankBoothIDs, OBJECT_TYPE_INTERACTABLE, I_Minimap_Radius);
  if not (high(BankerObjects) < 0) then
  begin
    for i:=0 to high(BankerObjects) do
    begin
      if TileOnMS (BankerObjects[i].Tile, 0) then
      begin
        TP := TileToMS (BankerObjects[i].Tile, 0);
        I_GMouse (TP.x, TP.y, 3, 3, false);
        if R_WaitOptionMulti (['uick', 'se-'], 2500) then
        begin
          Result := I_WaitUntilAnyBankScreen (3500+random(4000));
          if Result then Exit;
          Writeln ('[Infinity: Banking] Timed out waiting for bank screen');
        end else Writeln ('[Infinity: Banking] "uick/se-" menu text not found');
      end;
    end;
  end;

  // Check NPCs
  Writeln ('[Infinity: Banking] Looking for banker NPCs');
  if not I_AnyBankScreen then
  begin
    BankerIDs := I_ReturnBankerNPCIDs;
    BankerNPCs := SortNPCs(GetNPCsBy(BankerIDs)); // Possible error
    if high(BankerObjects) < 0 then Exit;
    for i:=0 to high(BankerNPCs) do
    begin
      if TileOnMS (BankerNPCs[i].Tile, 0) then
      begin
        TP := TileToMS (BankerObjects[i].Tile, 0);
        I_GMouse (TP.x, TP.y, 3, 3, false);
        if R_WaitOptionMulti (['ank '], 2500) then
        begin
          Result := I_WaitUntilAnyBankScreen (3500+random(4000));
          if Result then Exit;
          Writeln ('[Infinity: Banking] Timed out waiting for bank screen');
        end else Writeln ('[Infinity: Banking] "ank " menu text not found');
      end;
    end;
  end;

  // Check Deposit boxes
  Writeln ('[Infinity: Banking] Looking for deposit boxes');
  if not I_AnyBankScreen then
  begin
    if not (high(BankerObjects) < 0) then
    begin
      for i:=0 to high(BankerObjects) do
      begin
        if TileOnMS (BankerObjects[i].Tile, 0) then
        begin
          TP := TileToMS (BankerObjects[i].Tile, 0);
          I_GMouse (TP.x, TP.y, 3, 3, false);
          if R_WaitOptionMulti (['eposi'], 2500) then
          begin
            Result := I_WaitUntilAnyBankScreen (3500+random(4000));
            if Result then Exit;
            Writeln ('[Infinity: Banking] Timed out waiting for bank screen');
          end else Writeln ('[Infinity: Banking] "eposi" menu text not found');
        end;
      end;
    end;
  end;

  // Check Chest IDs
  Writeln ('[Infinity: Banking] Looking for bank chests');
  if not I_AnyBankScreen then
  begin
    if not (high(BankerObjects) < 0) then
    begin
      for i:=0 to high(BankerObjects) do
      begin
        if TileOnMS (BankerObjects[i].Tile, 0) then
        begin
          TP := TileToMS (BankerObjects[i].Tile, 0);
          I_GMouse (TP.x, TP.y, 3, 3, false);
          if R_WaitOptionMulti (['pen'], 2500) then
          begin
            Result := I_WaitUntilAnyBankScreen (3500+random(4000));
            if Result then Exit;
            Writeln ('[Infinity: Banking] Timed out waiting for bank screen');
          end;
        end;
      end;
    end;
  end;

  Result := I_AnyBankScreen; // Just in case...
end;

{*******************************************************************************
function I_BankEx (TimeoutMs : Integer) : Boolean;
By: Cstrike
Description: Opens bank. Times out based on your input.
*******************************************************************************}
function I_BankEx (TimeoutMs : Integer) : Boolean;
var
  t : Integer;
begin
  Result := False;
  if not I_LoggedIn then Exit;
  if I_OpenBank then
  begin
    if R_PinScreen then
    begin
      I_EnterPin(Players[CurrentPlayer].Pin); // Fix later?
    end;
    MarkTime(t);
    repeat
      wait (50+random(50));
      Result := ValidInterface (I_Bank_DepositInterface) or ValidInterface (I_Bank_PinInterface);
    until Result or (TimeFromMark(t) > TimeoutMs)
  end;
  if Result then Writeln ('[Infinity: Bank] Opened bank successfully')
  else Writeln ('[Infinity: Bank] Failed to open bank');
end;

{*******************************************************************************
function I_Bank : Boolean;
By: Cstrike
Description: Opens bank. Times out in 6 seconds.
*******************************************************************************}
function I_Bank : Boolean;
begin
  Result := I_BankEx (6000);
end;

////////////////////////////////////////////////////////////////////////////////
//                    Internal Bank Handling Procedures                       //
////////////////////////////////////////////////////////////////////////////////

{*******************************************************************************
function I_DepositAllBank : Boolean;
By: Cstrike
Description: Deposits all for bank.
INCOMPLETE
*******************************************************************************}
function I_DepositAllBank : Boolean;
begin
  if not I_LoggedIn then Exit;
  Result := False;
  if ValidInterface (I_Bank_PinInterface) then
  begin
    Result := DepositAll; // Incomplete
  end;
end;

{*******************************************************************************
function I_DepositAllDepositBox : Boolean;
By: Cstrike
Description: Deposits all for deposit box.
INCOMPLETE
*******************************************************************************}
function I_DepositAllDepositBox : Boolean;
begin
  if not I_LoggedIn then Exit;
  Result := False;
  if ValidInterface (I_Bank_DepositInterface) then
  begin
    I_GMouse (349, 280, 13, 8, true);
    Result := True; // Incomplete
  end;
end;

{*******************************************************************************
function I_DepositAll : Boolean;
By: Cstrike
Description: Universal depositer for both Deposit Box and Bank Interface.
*******************************************************************************}
function I_DepositAll : Boolean;
begin
  if not I_LoggedIn then Exit;
  Result := False;
  if ValidInterface (I_Bank_Interface) then
    Result := I_DepositAllBank
  else if ValidInterface (I_Bank_DepositInterface) then
    Result := I_DepositAllDepositBox;
end;

{*******************************************************************************
function I_GrabBankItemData : TIntegerArray;
By: Cstrike
Description: Fills a TIA with all your bank items.
*******************************************************************************}
function I_GrabBankItemData : TIntegerArray;
var
  i, j : Integer;
begin
  if not I_LoggedIn then Exit;
  Result := [];
  if not ValidInterface(I_Bank_Interface) then Exit;
  for i:=0 to I_Bank_MaxItems do
  begin
    j := GetChildComponentID (762, 93, i);
    if j < 0 then Break;
    SetArrayLength (Result, i+1);
    Result[i] := j;
  end;
end;

{*******************************************************************************
function I_WithdrawItemFromBank (ID : Integer; ItemName : String; BankDataArray : TIntegerArray) : Boolean;
By: Cstrike
Description: Returns true if item is found. SlotNumber is the location of the
item in the bank after searching ItemName. First position is 0, item 2 is 1...etc
*******************************************************************************}
function I_WithdrawItemFromBank (ID, AmountToWithdraw : Integer; ItemName : String; BankDataArray : TIntegerArray) : Boolean;
var
  i, t, Width, Height : Integer;
  AbsPoint : TPoint;
begin
  if not I_LoggedIn then Exit;
  Result := False;
  AbsPoint := Point(-1, -1);
  if not ValidInterface(I_Bank_Interface) then Exit;

  // If not in bank
  if not InIntArray(BankDataArray, ID) then
  begin
    Writeln ('[Infinity: Banking] No item with ID '+ToStr(ID)+' in bank');
    Exit;
  end;

  // Get position finder open
  if not (pos('nter the name', GetInterfaceComponentText(752, 4)) > 0) then
  begin
    I_GMouse (83, 307, 9, 9, true);
    MarkTime(t);
    repeat
      wait (50+random(50));
    until (pos('nter the name', GetInterfaceComponentText(752, 4)) > 0) or (TimeFromMark(t) > 7000)
    if TimeFromMark(t) > 7000 then Exit;
  end;

  // Send requested name
  wait (500+random(800));
  TypeSendEx (ItemName, false);
  wait (400+random(1200));

  // PUT FAILSAFE FOR 'search found no items' HERE


  // Search for item from visible items and return slot number
  for i:=0 to I_Bank_MaxItems do
  begin
    if BankDataArray[i] = ID then
    begin
      Width := GetChildComponentWidth(I_Bank_Interface, 93, i);
      Height := GetChildComponentHeight(I_Bank_Interface, 93, i);
      AbsPoint := Point (GetChildComponentRelativeX(I_Bank_Interface, 93, i) + Width, GetChildComponentRelativeY(I_Bank_Interface, 93, i) + Height);
      if (AbsPoint.Y - Height) > 180 then
      begin
        Writeln ('Name unspecific, too many searches found');
        Exit;
      end;
      Break;
    end;
  end;

  // Withdraw item amount
  Mouse (AbsPoint.X, AbsPoint.Y, Width, Height, false);

  // Wait for menu

  // Choose proper menu option

  // Wait for bank inventory interface to show proper amount

  // Do backspace here until text is removed
end;
