{------------------------------------------------------------------------------]
|                             Core Functions                                   |
[------------------------------------------------------------------------------]
| - All core functions go here                                                 |
| - May include weird functions that dont fit anywhere else either [I_CopyTTA] |
|                                                                              |
|                                                                              |
[------------------------------------------------------------------------------}

// Major constants here
const
  I_Minimap_Radius = 15;
  I_Minimap_TileRadius = I_Minimap_Radius;
  I_Minimap_Tile_Radius = I_Minimap_Radius;

{===============================================================================
Function I_LoggedIn: Boolean;
By: Cstrike (inhereted from Method / Drags111 / Zyt3x)
Description: Returns true if logged in.
===============================================================================}
function I_LoggedIn: Boolean;
begin
  Result := (LoginIndex = 10) or (LoginIndex = 11);
end;

{===============================================================================
function I_AtLogin : Boolean;
By: Cstrike
Description: Returns true if at login screen.
===============================================================================}
function I_AtLogin : Boolean;
begin
  Result := (ValidInterface(596)) and (ValidInterface(744));
end;

{===============================================================================
function I_AtLobby : Boolean;
By: Cstrike
Description: Returns true if at lobby screen.
===============================================================================}
function I_AtLobby : Boolean;
begin
  Result := ValidInterface(906);
end;

{===============================================================================
function I_WorldMapOpen : Boolean;
By: Cstrike
Description: Returns true if world map is open
===============================================================================}
function I_WorldMapOpen : Boolean;
begin
  Result := ValidInterface (755);
end;

{===============================================================================
function I_CloseWorldMap : Boolean;
By: Cstrike
Description: Closes map.
===============================================================================}
function I_CloseWorldMap : Boolean;
var
  t : Integer;
begin
  Result := False;
  if not I_LoggedIn then Exit;
  if not I_WorldMapOpen then
  begin
    Result := True;
    Exit;
  end;
  MarkTime(t);
  Mouse (740, 10, 13, 13, true);
  repeat
    wait (50);
  until (TimeFromMark(t) > 7000) or not I_WorldMapOpen
  Result := not I_WorldMapOpen;
  if Result then Exit;

  // Sometimes the clicking fails due to a jagex glitch, therefore try again
  MarkTime(t);
  Mouse (740, 10, 13, 13, true);
  repeat
    wait (50);
  until (TimeFromMark(t) > 7000) or not I_WorldMapOpen
  Result := not I_WorldMapOpen;
end;

{===============================================================================
function I_ReturnSkillID (skill : String) : Integer;
By: Cstrike
Description: Returns skill ID if unsure of it.
===============================================================================}
function I_ReturnSkillID (skill : String) : Integer;
var
  Skill_List : TStringArray;
  i : Integer;
begin
  Result := -1;
  Skill_List := ['attack', 'defence', 'strength', 'hitpoints', 'range',
                 'prayer', 'magic', 'cooking', 'woodcutting', 'fletching',
                 'fishing', 'firemaking', 'crafting', 'smithing', 'mining',
                 'herblore', 'agility', 'thieving', 'slayer', 'farming',
                 'runecrafting', 'hunter', 'construction', 'summoning',
                 'dungeoneering'];
  for i:=0 to high(Skill_List) do
  begin
    if skill = Skill_List[i] then
    begin
      Result := i;
      Exit;
    end;
  end;
end;

{===============================================================================
function I_CombineIntArray (IntArray1, IntArray2 : TIntegerArray) : TIntegerArray;
By: Traveler
Description: Combines Two TIntegerArrays.
===============================================================================}
function I_CombineIntArray (IntArray1, IntArray2 : TIntegerArray) : TIntegerArray;
var
  I, c : Integer;
  Temp : TIntegerArray;
begin
  c := length(IntArray1) + length(IntArray2);
  SetLength (Temp, c);
  for I:=0 to High(IntArray1) do
  begin
    Temp[I] := IntArray1[I];
  end;
  c := High(IntArray1);
  for I:=0 to High(IntArray2) do
  begin
    Temp[c+1+I] := IntArray2[I];
  end;
  Result := Temp;
end;

{===============================================================================
function I_InvertTIA (TIA : TIntegerArray) : TIntegerArray;
By: Cstrike
Description: Inverts TIA
===============================================================================}
function I_InvertTIA (TIA : TIntegerArray) : TIntegerArray;
var
  i : Integer;
begin
  if high(TIA) < 0 then Exit; // Needs to have 2 numbers
  SetArrayLength (Result, high(TIA)+1);
  for i:=0 to high(TIA) do
    Result[i] := TIA[(high(TIA)-i)];
end;

{===============================================================================
function I_CopyTTA (TileArray : TTileArray) : TTileArray;
By: Cstrike
Description: Copies a TTA properly.
===============================================================================}
function I_CopyTTA (TileArray : TTileArray) : TTileArray;
var
  i : Integer;
begin
  Result := [];
  if high (TileArray) < 0 then Exit;
  SetArrayLength (Result, high(TileArray)+1);
  for i:=0 to high (TileArray) do
  begin
    Result[i].x := TileArray[i].x;
    Result[i].y := TileArray[i].y;
  end;
end;

{===============================================================================
function I_CopyTPA (TPA : TPointArray) : TPointArray;
By: Cstrike
Description: Copies a TPA properly.
Not needed, WizzyPlugin has it...
===============================================================================}
function I_CopyTPA (TPA : TPointArray) : TPointArray;
var
  i : Integer;
begin
  Result := [];
  if high (TPA) < 0 then Exit;
  SetArrayLength (Result, high(TPA)+1);  //126
  for i:=0 to high (TPA) do
  begin
    Result[i].x := TPA[i].x;
    Result[i].y := TPA[i].y;
  end;
end;

{===============================================================================
function I_ReturnClosestTileFromTileArray (TileArray : TTileArray) : Tile;
By: Cstrike
Description: Returns closest tile from a TTileArray. Gets 'first' closest tile.
===============================================================================}
function I_ReturnClosestTileFromTileArray (TileArray : TTileArray) : TTile;
var
  DistanceArray, QuickSortArray : TIntegerArray;
  i : Integer;
begin
  Result := Tile(0,0);
  if high(TileArray) < 0 then Exit;
  SetArrayLength (DistanceArray, high(TileArray)+1);
  SetArrayLength (QuickSortArray, high(TileArray)+1);
  for i:=0 to high(TileArray) do
  begin
    DistanceArray[i] := DistanceFrom (TileArray[i]);
    QuickSortArray[i] := DistanceFrom (TileArray[i]);
  end;
  QuickSort (QuickSortArray);
  for i:=0 to high(DistanceArray) do
  begin
    if DistanceArray[i] = QuickSortArray[0] then
    begin
      Result := Tile(TileArray[i].x, TileArray[i].y); // Result := TileArray[i]?
      Exit;
    end;
  end;
end;

{===============================================================================
function I_FindRandoms (ItemsToDeposit : TIntegerArray) : Boolean;
By: Cstrike
Description: Invokes random finding.
===============================================================================}
function I_FindRandoms (ItemsToDeposit : TIntegerArray) : Boolean;
begin
  Result := R_FindRandoms;
end;
