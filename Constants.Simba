{
  NULL_* Constants.
  Used to compare whether a value was correctly created.
}
const
  NULL_INT        = -1;
  NULL_STRING     = '';

{ Constants for Random Reporting }
const
{ const RandomCount;
  Description: Number of Anti-Randoms. }
  RandomCount = 5;

{ const RMimes, RBoxes, RFrogs, RDemon, RMolly, RPinball, RTalks, RForests, RPillory;
  Description: Random event constants to be used with Random Reporting. }
  RMolly   = 1;
  RMimes   = 2;
  RDemon   = 3;

{Global Variables for Random Reporting}
var
  RSolved, RFailed : array [1..RandomCount] of Integer;
 // R_RandomsDetected: integer;

const
// feel free to explain these better..
//--------Interface Constants---------\\
  INTERFACE_INVENTORY                                   = 149;
  INTERFACE_INVENTORY_BANKOPEN                          = 763;

  INTERFACE_EQUIPMENT                                   = 387;

  INTERFACE_BANK                                        = 762;
  INTERFACE_BANK_PIN                                    = 13;
  INTERFACE_BANK_BUTTON_CLOSE                           = 42;
  INTERFACE_BANK_BUTTON_DEPOSIT_BEAST_INVENTORY         = 36;
  INTERFACE_BANK_BUTTON_DEPOSIT_CARRIED_ITEMS           = 32;
  INTERFACE_BANK_BUTTON_DEPOSIT_WORN_ITEMS              = 34;
  INTERFACE_BANK_BUTTON_HELP                            = 43;
  INTERFACE_BANK_BUTTON_INSERT                          = 15;
  INTERFACE_BANK_BUTTON_ITEM                            = 19;
  INTERFACE_BANK_BUTTON_NOTE                            = 19;
  INTERFACE_BANK_BUTTON_SEARCH                          = 17;
  INTERFACE_BANK_BUTTON_SWAP                            = 15;
  INTERFACE_BANK_INVENTORY                              = 92;
  INTERFACE_BANK_ITEM_FREE_COUNT                        = 23;
  INTERFACE_BANK_ITEM_FREE_MAX                          = 24;
  INTERFACE_BANK_ITEM_MEMBERS_COUNT                     = 25;
  INTERFACE_BANK_ITEM_MEMBERS_MAX                       = 26;
  INTERFACE_BANK_SCROLLBAR                              = 114;

{
  Chat Constants:
}

var
  INTERFACE_TALKS: TIntegerArray; // All of the interfaces for NPCChat.
  INTERFACE_SELFTALKS: TIntegerArray; // "  "    "         for us chatting to NPCs.

const
  CHAT_TYPE_NORMAL  = 0;
  CHAT_TYPE_CHATTER = 1;
  //  Private
  CHAT_TYPE_PRIVATE = 2;
  //  Trade
  CHAT_TYPE_TRADE   = 3;
  //  Black/System
  CHAT_TYPE_SYSTEM  = 4;
  //  Includes all the former Types
  CHAT_TYPE_ALL     = 5;

{
  Records:
}

{*******************************************************************************
TRenderData - Stores the rotation matrix used by the client to render to
              the main screen, along with offsets.
TRender - Stores information about the rendered world including ranges
          for acceptable values, and scaling factors.
TTile - equivlent to a TPoint, but signifies a global tile position in the
        Runescape client. Not to be used for any other purpose.
*******************************************************************************}
type
  TRenderData = record
    xOff,xX,xY,xZ : extended;
    yOff,yX,yY,yZ : extended;
    zOff,zX,zY,zZ : extended;
  end;
  TRender = record
    xScale,yScale : extended;
    xMin,xMax : extended;
    yMin,ymax : extended;
    zMax,zMin : extended;
  end;

  TTile = TPoint;
  function Tile(x, y: integer): TTile;
  begin
    Result.x := x;
    Result.y := y;
  end;
  function NULL_TILE: TTile;
  begin
    Result := Tile(NULL_INT, NULL_INT);
  end;


type
  TTileArray = array of TTile;

type
{ type TNPC;
  Description: Holds information related to an NPC. }
  TNPC = record
    Index, ID, Level, Animation, Height, HPRatio,
    Orientation: integer;// SOUTH = 0; NORTH = 180; CLOCKWISE.
    Tile: TTile;
    Name: String;
    Actions: TStringArray;
    Moving, Fighting: boolean;
  end;

  function NULL_NPC: TNPC;
  begin
    Result.Index := NULL_INT;
    Result.ID := NULL_INT;
    Result.Name := NULL_STRING;
    Result.Actions := [];
    Result.Tile := NULL_TILE;
    Result.Moving := False;
    Result.Animation := NULL_INT;
    Result.Height := NULL_INT;
    Result.HPRatio := NULL_INT;
    Result.Fighting := False;
    Result.Orientation := NULL_INT;
    Result.Level := NULL_INT;
  end;

{ type TMe;
  Description: Holds information related to your character. }
type
  TMe = record
    Tile: TTile;
    MS: TPoint;
    Animation, Speed, LoginIndex: Integer;
    HPRatio, Height, Level, Combat, TurnDirection: Integer;
    Name: string;
    InFight: boolean;
    Experience, Levels: array[0..23] of Integer;
    Equipment: TIntegerArray;
    Orientation: Integer; // SOUTH = 0; NORTH = 180; CLOCKWISE.
  end;

{ type TNPCArray;
  Description: Container for NPC array. }
type
  TNPCArray = array of TNPC;


{
  Equiptment information:
}

{
  Constants associated with the position in the array of the TEquiptmentSet.
}
const
  EQUIPMENT_HELMET     = 0;
  EQUIPMENT_CAPE       = 1;
  EQUIPMENT_NECKLACE   = 2;
  EQUIPMENT_WEAPON     = 3;
  EQUIPMENT_TORSO      = 4;
  EQUIPMENT_SHIELD     = 5;
  EQUIPMENT_LEGS       = 6;
  EQUIPMENT_GLOVES     = 7;
  EQUIPMENT_BOOTS      = 8;
  EQUIPMENT_RING       = 9;
  EQUIPMENT_AMMO       = 10;

{ type TEquipment;
  Description: Holds information about an equipment slot. }
type
  TEquipment = record
    ID: Integer;
    Name: String;
    IsAmmo: Boolean;
    Count: Integer;
    Actions: TStringArray;
  end;

  function NULL_EQUIPMENT: TEquipment;
  begin
    with result do
    begin
      ID := NULL_INT;
      Name := NULL_STRING;
      IsAmmo := False;
      Count := Null_INT;
      Actions := [];
    end;
  end;

{ type TEquiptmentSet;
  Description: Container for TEquiptment records. }
type
  TEquipmentSet = record
    Items: array [0..10] of TEquipment;
    AmmoCount: Integer;
  end;

{
  Inventory Constants:
}
{ type TInvItem;
  Description: Holds information pertaining to an inventory slot. }
type
  TInvItem = record
    ID, StackSize, Slot: integer;
    Name: String;
    Actions: TStringArray;
  end;

  function NULL_INVITEM: TInvItem;
  begin
    Result.ID := NULL_INT;
    Result.StackSize := NULL_INT;
    Result.Slot := NULL_INT;
    Result.Name := NULL_STRING;
    Result.Actions := [];
  end;

{ type TInvItemArray;
  Description: Container for TInvItem. }
type
  TInvItemArray = array of TInvItem;

{
  Objects
}
const
  {
    Object Types:
  }
  OBJECT_TYPE_INTERACTABLE = 0;
  OBJECT_TYPE_WALLOBJECT   = 1;
  OBJECT_TYPE_WALLDECOR    = 2;
  OBJECT_TYPE_FLOORDECOR   = 3;

type
{ type TRSObject;
  Description: Contains informations pertaining to Objects. }
  TRSObject = record
    objType: integer;
    ID: Integer;
    Tile: TTile;
  end;

  function NULL_RSOBJECT: TRSObject;
  begin
    Result.ID := NULL_INT;
    Result.objType := NULL_INT;
    Result.Tile := NULL_TILE;
  end;

{ type TRSObjectArray;
  Description: Container for TRSObjects. }
type
  TRSObjectArray = array of TRSObject;

procedure SetupConstants;
begin
  SetLength(INTERFACE_TALKS, 19);
  INTERFACE_TALKS := [211, 241, 251, 101, 242, 102, 161, 249, 243,
                      64, 65, 244, 255, 249, 230, 372, 421, 66, 64];

  SetLength(INTERFACE_SELFTALKS, 2);
  INTERFACE_SELFTALKS := [66, 64];
end;
