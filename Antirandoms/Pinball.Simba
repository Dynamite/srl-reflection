{*******************************************************************************
function R_InPinball : Boolean;
by: Drags111
Description: Checks if player is in Pinball Random.
*******************************************************************************}
function R_InPinball : Boolean;
begin
  Result := ValidNPC('Tilt');
end;

{*******************************************************************************
function Pinball_GetScore : Integer;
by: lordsaturn
Description: Returns the current score of the player.
*******************************************************************************}
function Pinball_GetScore : Integer;
var
  S : string;
begin
  S := GetInterfaceText(263, 1);
  Delete(S, 1, 7);                                //+3, +4
  Result := StrToIntDef(S, 11);
end;

function Pinball_GetPillar: TRSObject;
begin
  Result := GetObjectByIDEx([15000, 15002, 15004, 15006, 15008], 0, 52);
end;

function Pinball_Leave: boolean;
var
  TheExit: TRSObject;
  P: TPoint;
  T: TTile;
  time: integer;
begin
  TheExit := GetObjectByID(15010, 0, 52);
  if (TheExit = NULL_RSOBJECT)then Exit;
  MakeCompass('s');
  SetAngle(false);
  T := TheExit.Tile;
  if not TileOnMS(T, 100)then
  begin
    if not WalkToTile(t, 0, 0)then
      Exit;
    if not TileOnMs(t, 100)then Exit;
  end;
  P := TileToMS(T, 100);
  Mouse(P.x, P.y, 3, 3, false);
  Result := R_ChooseOption('exit cave exit');
  if Result then
  begin
    MarkTime(time);
    while(R_InPinball and (TimeFromMark(time) < 10000))do
    begin
      if(charactermoving)then
        MarkTime(time);
      Wait(100+Random(500));
    end;
  end;
end;

{*******************************************************************************
function R_SolvePinball : Boolean;
by: lordsaturn
Description: Solves Pinball Random.
*******************************************************************************}
function R_SolvePinball : Boolean;
var
  CurrPole: TRSObject;
  P: TPoint;
  t, lastscore, currscore: integer;
begin
  while R_InPinball do
  begin
    lastscore := Pinball_GetScore;
    currscore := Pinball_GetScore;
    if(currscore >= 10)then
    begin
      Writeln('Done tagging pillars! Score is 10!');
      Result := True;
      Pinball_Leave;
      Break;
    end;
    while R_ClickToContinue do
      wait(900+Random(900));
    CurrPole := Pinball_GetPillar;
    if (CurrPole <> NULL_RSOBJECT)then
    begin
      P := TileToMS(CurrPole.Tile, 400);
      Mouse(P.x, P.y, 3, 3, false);
      if R_ChooseOption('tag')then
      begin
        Writeln('Tagged!');
        MarkTime(t);
        while((currscore = lastscore) and (TimeFromMark(t) < 10000))do
        begin
          if CharacterMoving then
            MarkTime(t);
          currscore := Pinball_GetScore;
        end;
      end;
    end;
  end;
  R_ClickToContinue;
  Result := not R_InPinball;
  if Result then
    Inc(RSolved[RPinballs])
  else
    Inc(RFailed[RPinballs]);
end;

