var
  Sign1, Sign2, Sign3, Sign4: Integer;

{*******************************************************************************
function R_InDemon : Boolean;
by: Drags111
Description: Results true if the Drill Demon is found.
*******************************************************************************}
function R_InDemon : Boolean;
begin
  Result := ValidNPC(2790);
end;

procedure R_SetSigns;
begin
  case GetSetting(531) of
    668:begin
					sign1 := 1;
					sign2 := 2;
					sign3 := 3;
					sign4 := 4;
        end;
		675:begin
					sign1 := 2;
					sign2 := 1;
					sign3 := 3;
					sign4 := 4;
        end;
		724:begin
					sign1 := 1;
					sign2 := 3;
					sign3 := 2;
					sign4 := 4;
        end;
		738:begin
					sign1 := 3;
					sign2 := 1;
					sign3 := 2;
					sign4 := 4;
        end;
		787:begin
					sign1 := 2;
					sign2 := 3;
					sign3 := 1;
					sign4 := 4;
        end;
		794:begin
					sign1 := 3;
					sign2 := 2;
					sign3 := 1;
					sign4 := 4;
        end;
		1116:begin
					sign1 := 1;
					sign2 := 2;
					sign3 := 4;
					sign4 := 3;
        end;
		1123:begin
					sign1 := 2;
					sign2 := 1;
					sign3 := 4;
					sign4 := 3;
        end;
		1228:begin
					sign1 := 1;
					sign2 := 4;
					sign3 := 2;
					sign4 := 3;
        end;
		1249:begin
					sign1 := 4;
					sign2 := 1;
					sign3 := 2;
					sign4 := 3;
        end;
		1291:begin
					sign1 := 2;
					sign2 := 4;
					sign3 := 1;
					sign4 := 3;
        end;
		1305:begin
					sign1 := 4;
					sign2 := 2;
					sign3 := 1;
					sign4 := 3;
        end;
		1620:begin
					sign1 := 1;
					sign2 := 3;
					sign3 := 4;
					sign4 := 2;
        end;
		1634:begin
					sign1 := 3;
					sign2 := 1;
					sign3 := 4;
					sign4 := 2;
        end;
		1676:begin
					sign1 := 1;
					sign2 := 4;
					sign3 := 3;
					sign4 := 2;
        end;
		1697:begin
					sign1 := 4;
					sign2 := 1;
					sign3 := 3;
					sign4 := 2;
        end;
		1802:begin
					sign1 := 3;
					sign2 := 4;
					sign3 := 1;
					sign4 := 2;
        end;
		1809:begin
					sign1 := 4;
					sign2 := 3;
					sign3 := 1;
					sign4 := 2;
        end;
		2131:begin
					sign1 := 2;
					sign2 := 3;
					sign3 := 4;
					sign4 := 1;
        end;
		2138:begin
					sign1 := 3;
					sign2 := 2;
					sign3 := 4;
					sign4 := 1;
        end;
		2187:begin
					sign1 := 2;
					sign2 := 4;
					sign3 := 3;
					sign4 := 1;
        end;
		2201:begin
					sign1 := 4;
					sign2 := 2;
					sign3 := 3;
					sign4 := 1;
        end;
		2250:begin
					sign1 := 3;
					sign2 := 4;
					sign3 := 2;
					sign4 := 1;
        end;
		2257:begin
					sign1 := 4;
					sign2 := 3;
					sign3 := 2;
					sign4 := 1;
        end;
  end;
  Writeln(Sign1);
  Writeln(Sign2);
  Writeln(Sign3);
  Writeln(Sign4);
end;

function R_GetCommand: String;
var
  i: integer;
  temp: String;
begin
  for i := 0 to High(INTERFACE_TALKS)do
    //if(Pos('get back to', GetInterfaceText(INTERFACE_TALKS[i], 4)) > 0)then
    if(ValidInterface(INTERFACE_TALKS[i]))then
    begin
      Writeln('Continue.');
      Mouse(306, 455, 10, 2, true);
      Break;
    end;
  Temp := GetInterfaceText(148, 1);
  if(Pos('push ups', temp)>0)then
  begin
    Result := 'push ups';
    Exit;
  end;
  if(Pos('sit ups', temp)>0)then
  begin
    Result := 'sit ups';
    Exit;
  end;
  if(Pos('jumps', temp)>0)then
  begin
    Result := 'jumps';
    Exit;
  end;
  if(Pos('jog on', temp)>0)then
  begin
    Result := 'jog';
    Exit;
  end;

end;

function R_Jump: boolean;
var
  P: TPoint;
begin
  Writeln('Star jumps');
  if(sign1 = 1)then
  begin
    if not TileOnMS(Tile(3160, 4820), 0)then
      WalkToTile(Tile(3160, 4820), 0, 0);
    P := TileToMS(Tile(3160, 4820), 0);
    Mouse(P.x, P.y, 3, 3, false);
    Result := R_ChooseOption('use');
  end;
  if(sign2 = 1)then
  begin
    if not TileOnMS(Tile(3162, 4820), 0)then
      WalkToTile(Tile(3162, 4820), 0, 0);
    P := TileToMS(Tile(3162, 4820), 0);
    Mouse(P.x, P.y, 3, 3, false);
    Result := R_ChooseOption('use');
  end;
  if(sign3 = 1)then
  begin
    if not TileOnMS(Tile(3164, 4820), 0)then
      WalkToTile(Tile(3164, 4820), 0, 0);
    P := TileToMS(Tile(3164, 4820), 0);
    Mouse(P.x, P.y, 3, 3, false);
    Result := R_ChooseOption('use');
  end;
  if(sign4 = 1)then
  begin
    if not TileOnMS(Tile(3166, 4820), 0)then
      WalkToTile(Tile(3166, 4820), 0, 0);
    P := TileToMS(Tile(3166, 4820), 0);
    Mouse(P.x, P.y, 3, 3, false);
    Result := R_ChooseOption('use');
  end;
end;

function R_PushUps: boolean;
var
  P: TPoint;
begin
  if(sign1 = 2)then
  begin
    if not TileOnMS(Tile(3160, 4820), 0)then
      WalkToTile(Tile(3160, 4820), 0, 0);
    P := TileToMS(Tile(3160, 4820), 0);
    Mouse(P.x, P.y, 3, 3, false);
    Result := R_ChooseOption('use');
  end;
  if(sign2 = 2)then
  begin
    if not TileOnMS(Tile(3162, 4820), 0)then
      WalkToTile(Tile(3162, 4820), 0, 0);
    P := TileToMS(Tile(3162, 4820), 0);
    Mouse(P.x, P.y, 3, 3, false);
    Result := R_ChooseOption('use');
  end;
  if(sign3 = 2)then
  begin
    if not TileOnMS(Tile(3164, 4820), 0)then
      WalkToTile(Tile(3164, 4820), 0, 0);
    P := TileToMS(Tile(3164, 4820), 0);
    Mouse(P.x, P.y, 3, 3, false);
    Result := R_ChooseOption('use');
  end;
  if(sign4 = 2)then
  begin
    if not TileOnMS(Tile(3166, 4820), 0)then
      WalkToTile(Tile(3166, 4820), 0, 0);
    P := TileToMS(Tile(3166, 4820), 0);
    Mouse(P.x, P.y, 3, 3, false);
    Result := R_ChooseOption('use');
  end;
end;

function R_SitUps: boolean;
var
  P: TPoint;
begin
  Writeln('Situps');
  if(sign1 = 3)then
  begin
    Writeln('Found sign');
    if not TileOnMS(Tile(3160, 4820), 0)then
      WalkToTile(Tile(3160, 4820), 0, 0);
    P := TileToMS(Tile(3160, 4820), 0);
    Mouse(P.x, P.y, 3, 3, false);
    Result := R_ChooseOption('use');
  end;
  if(sign2 = 3)then
  begin
    Writeln('Found sign');
    if not TileOnMS(Tile(3162, 4820), 0)then
      WalkToTile(Tile(3162, 4820), 0, 0);
    P := TileToMS(Tile(3162, 4820), 0);
    Mouse(P.x, P.y, 3, 3, false);
    Result := R_ChooseOption('use');
  end;
  if(sign3 = 3)then
  begin
    Writeln('Found sign');
    if not TileOnMS(Tile(3164, 4820), 0)then
      WalkToTile(Tile(3164, 4820), 0, 0);
    P := TileToMS(Tile(3164, 4820), 0);
    Mouse(P.x, P.y, 3, 3, false);
    Result := R_ChooseOption('use');
  end;
  if(sign4 = 3)then
  begin
    Writeln('Found sign');
    if not TileOnMS(Tile(3166, 4820), 0)then
      WalkToTile(Tile(3166, 4820), 0, 0);
    P := TileToMS(Tile(3166, 4820), 0);
    Mouse(P.x, P.y, 3, 3, false);
    Result := R_ChooseOption('use');
  end;
end;

function R_Jog: boolean;
var
  P: TPoint;
begin
  if(sign1 = 4)then
  begin
    if not TileOnMS(Tile(3160, 4820), 0)then
      WalkToTile(Tile(3160, 4820), 0, 0);
    P := TileToMS(Tile(3160, 4820), 0);
    Mouse(P.x, P.y, 3, 3, false);
    Result := R_ChooseOption('use');
  end;
  if(sign2 = 4)then
  begin
    if not TileOnMS(Tile(3162, 4820), 0)then
      WalkToTile(Tile(3162, 4820), 0, 0);
    P := TileToMS(Tile(3162, 4820), 0);
    Mouse(P.x, P.y, 3, 3, false);
    Result := R_ChooseOption('use');
  end;
  if(sign3 = 4)then
  begin
    if not TileOnMS(Tile(3164, 4820), 0)then
      WalkToTile(Tile(3164, 4820), 0, 0);
    P := TileToMS(Tile(3164, 4820), 0);
    Mouse(P.x, P.y, 3, 3, false);
    Result := R_ChooseOption('use');
  end;
  if(sign4 = 4)then
  begin
    if not TileOnMS(Tile(3166, 4820), 0)then
      WalkToTile(Tile(3166, 4820), 0, 0);
    P := TileToMS(Tile(3166, 4820), 0);
    Mouse(P.x, P.y, 3, 3, false);
    Result := R_ChooseOption('use');
  end;
end;

{*******************************************************************************
function R_SolveDemon : Boolean;
by: Drags111
Description: Solves the Drill Demon Random.
*******************************************************************************}

function R_SolveDemon : Boolean;
var
  a, t: integer;
  order, neworder: String;
begin
  Result := False;
  if not R_InDemon then Exit;
  SetAngle(True);
  while R_InDemon do
  begin
    R_SetSigns;
    MarkTime(t);
    order := '';
    while ((order = '') and (TimeFromMArk(t) < 10000))do
    begin
      order := R_GetCommand;
      wait(100+Random(100));
    end;
    R_SetSigns;
    Writeln('Doing order '+order);
    case order of
      'jumps': R_Jump;
      'push ups': R_Pushups;
      'sit ups': R_Situps;
      'jog': R_Jog;
    end;
    neworder := order;
    while ((neworder = order) and (TimeFromMArk(t) < 20000))do
    begin
      neworder := R_GetCommand;
      wait(100+Random(100));
    end;
  end;
  R_ClickToContinue;
  Result := not R_InDemon;
  if Result then
    Inc(RSolved[RDemon])
  else
    Inc(RFailed[RDemon]);
end;
